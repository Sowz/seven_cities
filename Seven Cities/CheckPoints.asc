#define MAX_CHECKPOINTS 100

struct CheckpointData {
  String name;
};

struct CheckpointCategory {
  String name;
  int nextCheckpointIndex;
  String checkpoints[10];  
  RoomsEnum rooms[10];  
  import int AddCheckpoint(String name,  RoomsEnum room);
};



int nextCategoryIndex = 0;
CheckpointCategory categories[17];

int curCheckpoint = 1;  //we keep track of the id of the last registered checkpoint,
                        //because they can only be created in increasing order.
                        //note: our checkpoints start from 1 because enums (such as CheckPointsEnum) also start from 1.

//bool _skipCutsceneIfAny = false;

/*
static bool CheckPoints::ShouldSkipCutscene_Consume() {
  bool result = _skipCutsceneIfAny;
  _skipCutsceneIfAny = false;
  return result;
}
*/


CheckpointData checkpointsData[MAX_CHECKPOINTS];



bool checkpointInitialized = true; //is false after a "jump to" until all variables have been set in the destination room
int requestedCategory = 0;
int requestedCheckpoint = 0;


function AddCategory(String name) {
  categories[nextCategoryIndex].name = name;
  categories[nextCategoryIndex].nextCheckpointIndex = 0;
  nextCategoryIndex++;
}

function CheckpointCategory::AddCheckpoint(String name,    RoomsEnum room) 
{
  this.checkpoints[this.nextCheckpointIndex] = name;
  this.rooms[this.nextCheckpointIndex] =  room;
  this.nextCheckpointIndex++;
}

static void CheckPoints::RegisterNew(int id, String name) 
 {
   
   //safety: do we follow the process and register the checkpoints in increasing order?
   if (id != curCheckpoint) {
     AbortGame(String.Format("Programing mistake: you didn't register the checkpoints in the logical order: 0,1,2,... Or maybe you entered this room twice. (Expected %d, found %d)", curCheckpoint, id));
   }   

   //safety: does it already exist?
   if (checkpointsData[id].name != null) {
     AbortGame("Programing mistake: you declared two checkpoints with the same ID");
   }
   
   checkpointsData[id].name = name;
   //ListBoxCheckpoints.AddItem(String.Format("(%d) : %s", id,  name));
   curCheckpoint++;
 }
 
static void CheckPoints::RegisterAll() 
 {
    AddCategory("MENU");
    categories[nextCategoryIndex-1].AddCheckpoint("Disclaimer", eRoom_GUI_02_Disclaimer);
    categories[nextCategoryIndex-1].AddCheckpoint("Main Menu", eRoom_GUI_00_TitleMenu);
    
    AddCategory("GUI");
    categories[nextCategoryIndex-1].AddCheckpoint("Menu", eRoom_GUI_00_TitleMenu);
    categories[nextCategoryIndex-1].AddCheckpoint("Credits", eRoom_GUI_01_EndCredits);
    categories[nextCategoryIndex-1].AddCheckpoint("Disclamer", eRoom_GUI_02_Disclaimer);
    
    AddCategory("01 TIBET");
    categories[nextCategoryIndex-1].AddCheckpoint("01-00 Map Close up", eRoom_01_00_MapCloseUp);
    categories[nextCategoryIndex-1].AddCheckpoint("01-01 Tibet-top", eRoom_01_01_TibetTop);
    categories[nextCategoryIndex-1].AddCheckpoint("01-02 Ice Cave", eRoom_01_02_IceCave);
    
    AddCategory("02 BARNETT");
    categories[nextCategoryIndex-1].AddCheckpoint("02-04 Mulbray's Classroom", eRoom_02_04_Mulbray);
    categories[nextCategoryIndex-1].AddCheckpoint("02-05 Irene's Office", eRoom_02_05_Irene);
    categories[nextCategoryIndex-1].AddCheckpoint("02-06 Indy's Office", eRoom_02_06_IndyOffice);
    
    AddCategory("03 ARIZONA");
    categories[nextCategoryIndex-1].AddCheckpoint("03-00 Outside Hotel", eRoom_03_00_HotelOutside);
    categories[nextCategoryIndex-1].AddCheckpoint("03-01 Marcu's Room", eRoom_03_01_MarcusRoom);
    categories[nextCategoryIndex-1].AddCheckpoint("03-02 Cave entrance & inside", eRoom_03_02_IndianCave);
    
    AddCategory("04 NEW YORK");
    categories[nextCategoryIndex-1].AddCheckpoint("04-00 Newspaper", eRoom_04_00_NewsPaper);
    categories[nextCategoryIndex-1].AddCheckpoint("04-01 Inside Taxi", eRoom_04_01_InsideTaxi);
    categories[nextCategoryIndex-1].AddCheckpoint("04-02 Inside Hotel", eRoom_04_02_InsideHotel);
    
    AddCategory("05 SPAIN");
    
    AddCategory("06 ENGLAND");
    
    AddCategory("07 PARIS");
    
    AddCategory("08");
    
    AddCategory("09 JERUSALEM");
    
    AddCategory("10 GERMANY");
    
    AddCategory("11 OUTSIDE GER");
    
    AddCategory("12 MEXICO");
    
    AddCategory("13 VENEZUELA");
    
    AddCategory("14 ENDING");
    
    AddCategory("DEBUG/TESTS");


    for(int catIndex = 0; catIndex < nextCategoryIndex; catIndex++) { 
      ListBoxCategories.AddItem(String.Format("%s (%d)", categories[catIndex].name, categories[catIndex].nextCheckpointIndex));
      //Display("%d : %s", catIndex, categories[catIndex].name);
    }

    for(int checkpointIndex = 0; checkpointIndex < categories[0].nextCheckpointIndex; checkpointIndex++) {
      ListBoxCheckpoints.AddItem(categories[0].checkpoints[checkpointIndex]);
    }
    
   
    CheckPoints.RegisterNew(eChckpnt_01_Disclaimer,                      "MENU: eChckpnt_01_Disclaimer") ;
    CheckPoints.RegisterNew(eChckpnt_02_MainMenu,                        "MENU: eChckpnt_02_MainMenu") ;
    CheckPoints.RegisterNew(eChckpnt_03_IndysClassroom_chalkboardCutscene,"BARNETT: eChckpnt_03_IndysClassroom_chalkboardCutscene") ;
    CheckPoints.RegisterNew(eChckpnt_04_IndysClassroom_studentsPuzzle,   "BARNETT: eChckpnt_04_IndysClassroom_studentsPuzzle") ;   
    CheckPoints.RegisterNew(eChckpnt_05_IndysClassroom_studentsPuzzle2,  "BARNETT: eChckpnt_05_IndysClassroom_studentsPuzzle2") ;   
    CheckPoints.RegisterNew(eChckpnt_06_BarnettCorridor,                 "BARNETT: eChckpnt_06_BarnettCorridor") ;  
    CheckPoints.RegisterNew(eChckpnt_07_BarnettReadTelegram,             "BARNETT: eChckpnt_07_BarnettReadTelegram") ;   
    CheckPoints.RegisterNew(eChckpnt_07_BarnettOutside,                  "BARNETT: eChckpnt_07_BarnettOutside") ;   
    CheckPoints.RegisterNew(eChckpnt_08_TibetTop,                        "TIBET: eChckpnt_08_TibetTop") ;   
    CheckPoints.RegisterNew(eChckpnt_09_MirrorsTests,                    "DEBUG: eChckpnt_09_MirrorsTests") ;   
    CheckPoints.RegisterNew(eChckpnt_10_NewClassRoom,                    "BARNETT: eChckpnt_10_NewClassRoom") ;   
    CheckPoints.RegisterNew(eChckpnt_11_NewChalkboard,                   "BARNETT: eChckpnt_11_NewChalkboard") ;   
    CheckPoints.RegisterNew(eChckpnt_12_FontsTests,                      "DEBUG: Fonts tests") ;   
    CheckPoints.RegisterNew(eChckpnt_13_SpainDigSite,                    "SPAIN: eChckpnt_13_SpainDigSite") ;   
    CheckPoints.RegisterNew(eChckpnt_14_SpainTruckCutscene,              "SPAIN: eChckpnt_14_SpainTruckCutscene") ;   
    CheckPoints.RegisterNew(eChckpnt_15_TextArea,                        "DEBUG: eChckpnt_15_TextArea") ;   
    CheckPoints.RegisterNew(eChckpnt_16_FoAcredits,                      "DEBUG: eChckpnt_16_FoAcredits") ;   
    CheckPoints.RegisterNew(eChckpnt_17_RegularCredits,                  "MENU: eChckpnt_17_RegularCredits") ;   
    CheckPoints.RegisterNew(eChckpnt_18_Mirrors2,                        "DEBUG: Mirrors 2") ;   
    CheckPoints.RegisterNew(eChckpnt_19_Flagstaff_cave,                  "ARIZ: Cave entrance") ;   
    CheckPoints.RegisterNew(eChckpnt_20_SPAINcountryside,                "SPAIN: countryside") ;   
    CheckPoints.RegisterNew(eChckpnt_21_DEBUGiciclesTests,               "DEBUG: icicles tests") ;   
    CheckPoints.RegisterNew(eChckpnt_22_BarnettOutside,                  "BARNETT: outside, telegram read") ;   
    CheckPoints.RegisterNew(eChckpnt_23_VENEZguardians,                  "VENEZ: Guardians") ;   
    CheckPoints.RegisterNew(eChckpnt_24_ParisCafeAndPhoneBooth,          "PARIS: eChckpnt_24_ParisCafeAndPhoneBooth") ;
    CheckPoints.RegisterNew(eChckpnt_25_ConventIndise,                   "PARIS: eChckpnt_25_ConventInside");
    CheckPoints.RegisterNew(eChckpnt_26_ChurchRuins,                     "PARIS: eChckpnt_26_ChurchRuins");
    CheckPoints.RegisterNew(eChckpnt_27_ConventYard,                     "PARIS: eChckpnt_27_ConventYard");
    CheckPoints.RegisterNew(eChckpnt_28_SpainGeorgeTent,                 "SPAIN: echckpnt_28_GeorgeTent");
    CheckPoints.RegisterNew(eChckpnt_29_SpainOfficerTent,                "SPAIN: echckpnt_29_OfficerTent");
    CheckPoints.RegisterNew(eChckpnt_30_FOACredits,                      "USELESS: same as 16.");
    CheckPoints.RegisterNew(eChckpnt_31_Credits,                         "TIBET: Escape slope & opening credits");
    CheckPoints.RegisterNew(eChckpnt_32_NEWYORKSubmarineCutscene,        "NEW YORK : submarine cutscene");
    CheckPoints.RegisterNew(eChckpnt_33_GuiSettings,                     "GUI: Settings");
    CheckPoints.RegisterNew(eChckpnt_34_MexicoCrater,                    "Mexico : 12-03 Crater");
    CheckPoints.RegisterNew(eChckpnt_35_MexicoTest,                      "Mexico : 12-01 Test");
    CheckPoints.RegisterNew(eChckpnt_36_BlackMarketDen,                  "Jerusalem : 09-02 BlackMarketDen");
    CheckPoints.RegisterNew(eChckpnt_37_TibetIceCave,                    "Tibet : Ice Cave");
    CheckPoints.RegisterNew(eChckpnt_38_merchandise_lobby,               "Venezuela : 13-05 Merchandise Lobby");
    CheckPoints.RegisterNew(eChckpnt_39_13_07_CityOfGoldGeneralView,     "Venezuela : 13-07 City of gold general view");
    CheckPoints.RegisterNew(eChckpnt_40_PARISCatacombWaterMazeShore,     "PARIS : 07-03a CatacombWaterMazeShore");
    CheckPoints.RegisterNew(eChckpnt_41_PARISGenericCatacombsBGWater,    "PARIS : 07-03b Catacomb BG in water");
    CheckPoints.RegisterNew(eChckpnt_42_PARISGenericCatacombsBGLand,     "PARIS : 07-03c Generic Catacombs BG on land");
    CheckPoints.RegisterNew(eChckpnt_43_NewYorkOutsideWarehouse,         "New York : 04-03 Outside Warehouse");
    CheckPoints.RegisterNew(eChckpnt_44_DEBUGCharAnim,                   "DEBUG : character animation tests");
    CheckPoints.RegisterNew(eChckpnt_45_TIBETAnotherIceCave,             "TIBET : 01-01.5 Another ice cave");
    CheckPoints.RegisterNew(eChckpnt_46_SpainExcavation,                 "Spain : 05-06 Excavation");
    CheckPoints.RegisterNew(eChckpnt_47_DEBUGTestScrollLock,             "DEBUG : Test scrolling lock");
    CheckPoints.RegisterNew(eChckpnt_48_PARISBookCloseUp,                "PARIS : Book Close Up");
    CheckPoints.RegisterNew(eChckpnt_49_DEBUGguiTests,                   "DEBUG : GUI interactions (look at, etc.) tests");
    CheckPoints.RegisterNew(eChckpnt_50_VENEZ_BarracksOutside,           "VENEZ : Barracks Outside");
   
   
   
   
   
     

     
}
 
/*
static void CheckPoints::MainMenu() {
    player.ChangeRoom(eRoom_GUI_00_TitleMenu, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram_Cutscene() {
    player.Say("Let's take a look at that telegram.");
    prevX = player.x;
    prevY = player.y;
    gIconbar.Visible = false;
    gInventory.Visible = false;
    gStatusline.Visible = false;
    player.ChangeRoom(eRoom_02_09_BarnettTelegram, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram() {
  
  //give needed objects
  player.AddInventory(iOilCan);
  player.AddInventory(iTelegram);
  
  //arbitrarily go to Indy's office
  player.ChangeRoom(6,  160,  140);
  WAIT_10
  
}

static void CheckPoints::Barnett_NewGame() {
  StopMusic();
  if (!CheckPoints.ShouldSkipCutscene_Consume()) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else {  
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  }
    
}

static void CheckPoints::Barnett_Corridor() {
  StopMusic();
  
  //give proper objects
  //oil can
  //oilCan.Visible = false;
  player.AddInventory(iOilCan);    
  
  player.ChangeRoom(3, 500, 120);
}


static void CheckPoints::Spain_Test() {
  StopMusic();

  player.ChangeRoom(13, 1100, 130); 
  
    
}
*/

/*
  #ifdef TESTING
    gIconbar.Visible = true;
    gInventory.Visible = true;
    gStatusline.Visible = true;
    Mouse.Mode = eModeWalkto;
    SetMusicMasterVolume(0); //no sound
    
    //  player.ChangeRoom(3,  500,  125);
    player.AddInventory(iOilCan);
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  #endif
  */
  

static void CheckPoints::JumpDone() {
  checkpointInitialized = true;
}

static bool CheckPoints::IsJumping() {
  return !checkpointInitialized;
}

static int CheckPoints::RequestedCheckpoint() {
  return requestedCheckpoint;
}

static int CheckPoints::RequestedCheckpoint2() {
  return 0;
}

  
 void JumpToMenu(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToGui(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToTibet(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToBarnett(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
 
static void CheckPoints::JumpTo(int categoryIndex, int checkpointIndex) {
  #ifdef TESTING
  //Display(String.Format("Jumping to checkpoint #%d", checkpointIndex));
  #endif
  
  //_skipCutsceneIfAny = false; //we always reset that
  requestedCheckpoint = checkpointIndex;
  requestedCategory = categoryIndex;
  checkpointInitialized = false;
  
  //Display("%d : %d", categoryIndex,  checkpointIndex);
  
  RoomsEnum room = categories[requestedCategory].rooms[requestedCheckpoint];
  
  
  switch(categoryIndex)
  {
    case 0:
      JumpToMenu(checkpointIndex, room);
      break;
    case 1:
      JumpToGui(checkpointIndex, room);
      break;
    case 2:
      JumpToTibet(checkpointIndex, room);
      break;
    case 3:
      JumpToBarnett(checkpointIndex, room);
      break;
    default: 
      Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
      break;
  }
  
  
  /*
  if (checkpointIndex == eChckpnt_01_Disclaimer) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.MainMenu();
    player.ChangeRoom(20, 1, 1); //go to the disclaimer screen
  } else if (checkpointIndex ==eChckpnt_02_MainMenu) {
    //_skipCutsceneIfAny = true;
    //CheckPoints.MainMenu();
    player.ChangeRoom (eRoom_GUI_00_TitleMenu, 1, 1);
  } else if (checkpointIndex ==eChckpnt_03_IndysClassroom_chalkboardCutscene) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else if (checkpointIndex ==eChckpnt_04_IndysClassroom_studentsPuzzle) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpointIndex ==eChckpnt_05_IndysClassroom_studentsPuzzle2) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Spain_Test();
    //player.ChangeRoom(eRoom_05_02_DigSite, 1100, 130); //Spain
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpointIndex ==eChckpnt_06_BarnettCorridor) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Corridor();
    player.ChangeRoom(eRoom_02_03_BarnettCorridor, 631, 127);
  } else if (checkpointIndex ==eChckpnt_07_BarnettReadTelegram) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Read_Telegram();
    player.ChangeRoom(eRoom_02_06_IndyOffice,  160,  140); //go to Indy's office
  } else if (checkpointIndex ==eChckpnt_07_BarnettOutside) {
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  140); //go to Indy's office
  } else if (checkpointIndex ==eChckpnt_08_TibetTop) {
    player.ChangeRoom(eRoom_01_01_TibetTop,  217,  129); //go to Tibet mountain top
  } else if (checkpointIndex ==eChckpnt_09_MirrorsTests) {
    player.ChangeRoom(15,  65,  141); //go to Mirrors tests room
  } else if (checkpointIndex ==eChckpnt_10_NewClassRoom) {
    player.ChangeRoom(eRoom_02_02_IndyClassRoom_New,  160,  100); //go to new version of Indy's calssroom  
  } else if (checkpointIndex ==eChckpnt_11_NewChalkboard) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand,  160,  100); //go to new version of chalkboard 
  } else if (checkpointIndex ==eChckpnt_12_FontsTests) {
    player.ChangeRoom(19,  270,  150); //go to fonts tests screen (debug)
  } else if (checkpointIndex ==eChckpnt_13_SpainDigSite) {
    player.ChangeRoom(eRoom_05_02_DigSite, 1360, 130); //go to spanish digsite
  } else if (checkpointIndex ==eChckpnt_14_SpainTruckCutscene) {          // Demo purposes. Setting characters invisible
    player.Transparency = 100;
    cSP_NaziGuard.Transparency = 100;
    cSP_GeorgeGuard.Transparency = 100;     
    cSP_RandomNazi1.Transparency = 100;
    cSP_RandomNazi2.Transparency = 100;
    cSP_RandomNazi3.Transparency = 100;
    player.ChangeRoom(eRoom_05_02_DigSite,  480,120); //go to spanish digsite and play the truck cutscene
  } else if (checkpointIndex ==eChckpnt_15_TextArea) {
    player.ChangeRoom(21,  1200,  120); 
  } else if (checkpointIndex ==eChckpnt_16_FoAcredits) {
    player.ChangeRoom(22,  109, 119); 
  } else if (checkpointIndex ==eChckpnt_17_RegularCredits) {
    player.ChangeRoom(eRoom_GUI_01_EndCredits,  160,  0); 
  } else if (checkpointIndex ==eChckpnt_18_Mirrors2) {
    player.ChangeRoom(24,  160,  150); 
  } else if (checkpointIndex ==eChckpnt_19_Flagstaff_cave) {
    player.ChangeRoom(eRoom_03_02_IndianCave,  2,  157); //IMPORTANT: (2,157) is a special region that triggers the cutscene of Indy walking on the canyons
  } else if (checkpointIndex ==eChckpnt_20_SPAINcountryside) {
    player.ChangeRoom(eRoom_05_01_CountrySide,  303,  80);
  } else if (checkpointIndex ==eChckpnt_21_DEBUGiciclesTests) {
    player.ChangeRoom(27,  160,  150);
  } else if (checkpointIndex ==eChckpnt_22_BarnettOutside) {
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  } else if (checkpointIndex ==eChckpnt_23_VENEZguardians) {
    player.ChangeRoom(eRoom_13_06_JaguarGuardian,  52, 104);
    //player.ChangeRoom(eRoom_13_04_Guardians,  40, 50);
    //player.ChangeRoom(29,  48, 103);
  } else if (checkpointIndex ==eChckpnt_24_ParisCafeAndPhoneBooth) {
    player.ChangeRoom(eRoom_07_05_ParisCafe,  259, 114);
  } else if (checkpointIndex ==eChckpnt_25_ConventIndise) {
    player.ChangeRoom(eRoom_07_06_ConventInside, 42, 46);
  } else if (checkpointIndex ==eChckpnt_26_ChurchRuins) {
    player.ChangeRoom(eRoom_07_07_ChurchRuins, 248, 155);
  } else if (checkpointIndex ==eChckpnt_27_ConventYard) {
    player.ChangeRoom(eRoom_07_02_ConventYard, 508, 115);
  } else if (checkpointIndex ==eChckpnt_28_SpainGeorgeTent) {
    player.ChangeRoom(eRoom_05_03_GeorgeTent, 199, 108);
  } else if (checkpointIndex ==eChckpnt_29_SpainOfficerTent) {
    player.ChangeRoom(eRoom_05_04_OfficerTent,141, 102);
  } else if(checkpointIndex == eChckpnt_30_FOACredits) { //USELESS. Does the same as checkpoint 16
    player.ChangeRoom(22, 108, 117);
  }else if (checkpointIndex == eChckpnt_31_Credits) {
    player.ChangeRoom (eRoom_01_04_EscapeSlopAndCredits,  80, 80);
  }else if (checkpointIndex == eChckpnt_32_NEWYORKSubmarineCutscene) {
    player.ChangeRoom(eRoom_04_08_SubCutscene, 0, 0);
  } else if (checkpointIndex == eChckpnt_33_GuiSettings) {
    player.ChangeRoom(97, 0, 0);
  } else if (checkpointIndex == eChckpnt_34_MexicoCrater) {
    player.ChangeRoom(75, 38, 105);
  } else if (checkpointIndex == eChckpnt_35_MexicoTest) {
    player.ChangeRoom (73, 156, 70);
  } else if (checkpointIndex == eChckpnt_36_BlackMarketDen) {
    player.ChangeRoom (58, 150,  100);
  } else if (checkpointIndex == eChckpnt_37_TibetIceCave) {
    player.ChangeRoom (eRoom_01_02_IceCave, 163,  52);
  } else if (checkpointIndex == eChckpnt_38_merchandise_lobby) {
    player.ChangeRoom (98, 134, 116);
  } else if (checkpointIndex == eChckpnt_39_13_07_CityOfGoldGeneralView) {
    player.ChangeRoom (eRoom_13_07_CityGeneralView, 111, 74);
  } else if (checkpointIndex == eChckpnt_40_PARISCatacombWaterMazeShore) {
    player.ChangeRoom (32, 213, 111);
  } else if (checkpointIndex == eChckpnt_41_PARISGenericCatacombsBGWater) {
    player.ChangeRoom (117, 248, 119);
  } else if (checkpointIndex == eChckpnt_42_PARISGenericCatacombsBGLand) {
    player.ChangeRoom (118, 150, 150);
  } else if (checkpointIndex == eChckpnt_43_NewYorkOutsideWarehouse) {
    player.ChangeRoom (51, 47, 169);
  } else if (checkpointIndex == eChckpnt_44_DEBUGCharAnim) {
    player.ChangeRoom (122, 160, 200);
  } else if (checkpointIndex == eChckpnt_45_TIBETAnotherIceCave) {
    player.ChangeRoom (eRoom_01_015_AnotherIceCave, 160, 155);
  } else if (checkpointIndex == eChckpnt_46_SpainExcavation) {
    player.ChangeRoom (126, 300, 230);
  } else if (checkpointIndex == eChckpnt_47_DEBUGTestScrollLock) {
    player.ChangeRoom (eRoom_DEBUG_ScrollLockTests, 310,220);
  } else if (checkpointIndex == eChckpnt_48_PARISBookCloseUp) {
    player.ChangeRoom (eRoom_07_06b_BookCloseUp, 150, 150);
  } else if (checkpointIndex == eChckpnt_49_DEBUGguiTests) {
    player.ChangeRoom (eRoom_DEBUG_GUIinteractionsTests, 160, 120);
  } else if (checkpointIndex == eChckpnt_50_VENEZ_BarracksOutside) {
    player.ChangeRoom (eRoom_13_08_BarracksOutside, 280, 427, eDirectionRight);
  }
    
  else
  {
    Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
    //AbortGame(String.Format("Programing mistake: There is no checkpoint '%d'.",checkpointIndex));
  }
  */
}

int last_gCheckpoints_click = 0;
int last_gCheckpoints_checked = 0;

function on_event (EventType event, int data)
{ 
  GUIControl* overGuiControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  if (event == eEventGUIMouseUp) {
    
    if(overGuiControl == ListBoxCheckpoints) {
      DateTime *dt = DateTime.Now; 
      //double click detect
      if((dt.RawTime - last_gCheckpoints_click) < 2 && last_gCheckpoints_checked == ListBoxCheckpoints.SelectedIndex) {
        int checkpointIndex = ListBoxCheckpoints.SelectedIndex; //the listbox items indices are zero-based
        gCheckpoints.Visible = false;
        
        if (ButtonNoMusic.NormalGraphic == 360) {
          System.Volume = 0;
        }      

        CheckPoints.JumpTo(ListBoxCategories.SelectedIndex, checkpointIndex);

      }
      last_gCheckpoints_click = dt.RawTime;
      last_gCheckpoints_checked = ListBoxCheckpoints.SelectedIndex;
    }

    if(overGuiControl == ListBoxCategories) {
      int categoryIndex = ListBoxCategories.SelectedIndex;
      ListBoxCheckpoints.Clear();
      for(int checkpointIndex = 0; checkpointIndex < categories[categoryIndex].nextCheckpointIndex; checkpointIndex++) {
        ListBoxCheckpoints.AddItem(categories[categoryIndex].checkpoints[checkpointIndex]);
      }
    }
  }
}

function ScrollListBox(ListBox* listBox, MouseButton button) {
  if (button == eMouseWheelNorth) {
    listBox.ScrollUp();
    listBox.ScrollUp();
    listBox.ScrollUp();
  }
  else if (button == eMouseWheelSouth) {
    listBox.ScrollDown();
    listBox.ScrollDown();
    listBox.ScrollDown();
  }   
}

function on_mouse_click(MouseButton button)
{
  if(!gCheckpoints.Visible)
    return;
  
  GUIControl* overGuiControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  
  // you need to enable the mouse wheel support
  if(overGuiControl == ListBoxCheckpoints) {    
    ScrollListBox(ListBoxCheckpoints, button);
  }
  if(overGuiControl == ListBoxCategories) {    
    ScrollListBox(ListBoxCategories, button);
  }
}
