
#define MAX_DOORS 300 //there can't be more than MAX_DOORS doors throughout the entire game
#define MAX_ROOMS 300 //there can't be more than MAX_ROOMS rooms throughout the entire game
bool moduleInitialized = false;

struct RoomsDataStruct {
  int idRoom;
  bool isInitialized;
  int firstDoorIndex;
  int nbDoors;
};

RoomsDataStruct RoomsData[MAX_ROOMS];
int nbRooms = 0; //how many rooms have been initialized so far

Object* LastDoorEntered;




struct DoorsDataStruct
{

  Object* objectDoor;
  bool isOpen;

};


DoorsDataStruct DoorsData[MAX_DOORS];
int nbDoorsInTheGame = 0; //how many doors in the entire game




String defaultSentence_Pull     ;
String defaultSentence_Push     ;
String defaultSentence_Give     ;
String defaultSentence_Interact ;
String defaultSentence_Look     ;
String defaultSentence_PickUp   ;
String defaultSentence_Talk     ;
String defaultSentence_UseInv   ;
String defaultSentence_Open     ;
String defaultSentence_Close    ;
    
  
  


   
function InitializeModule() {

  //unfortunately AGS script does not allow to initialize a default
  //String's value at declaration. We are forced to do it here
  defaultSentence_Pull     = "If I want to use this door, I should OPEN it.";
  defaultSentence_Push     = "If I want to use this door, I should OPEN it.";
  defaultSentence_Give     = "That just won't work.";
  defaultSentence_Interact = "If I want to use this door, I should OPEN it.";
  defaultSentence_Look     = "It's an average door.";
  defaultSentence_PickUp   = "I can't pick the door up!";
  defaultSentence_Talk     = "Sure, I should just start talking to doors.";
  defaultSentence_UseInv   = "The door works fine. If I want to use this door, I should OPEN it.";
  defaultSentence_Open     = "It's already open.";
  defaultSentence_Close    = "It's already closed."; 
    
  moduleInitialized = true; //make sure we don't call it again
}

int findDoorIndex(Object* doorObj,  int roomId) {

  int startIndex = RoomsData[roomId].firstDoorIndex;
  int endIndex = startIndex+RoomsData[roomId].nbDoors;
  //player.Say(String.Format("Looking for a door in room %d starting from index %d and ending with %d", roomId,  startIndex,  endIndex));

  int i= startIndex;
  while (i<endIndex) {
    if (DoorsData[i].objectDoor == doorObj) {
      return i;      
    }
    i++;
  }
  AbortGame(String.Format("Error: findDoorIndex: Couldn't find the requested door in room %d", roomId));
}

function idCheck(int doorId) {
  if (doorId < 0 || doorId >= nbDoorsInTheGame)
    AbortGame(String.Format("Error in 'Doors' module : bad door id : (id=%d, but should be between 0 and %d", doorId,  MAX_DOORS));
    
}

EnumDirections door_dirFacingDoor(this Object*) {
  int direction = this.GetProperty("door_dirFacingDoor");
  return Directions.FromInt(direction);
}




static void  Doors::Open_Mute(Object* door) {

    
    door.Graphic = door.GetProperty("door_imgWhenOpen");
    //player.Say(String.Format("Changed door's graphic to  %d", door.GetProperty("door_imgWhenOpen")));
    
    int doorId = findDoorIndex(door,  player.Room);
    DoorsData[doorId].isOpen = true;
    
    door.Baseline = door.GetProperty("door_baselineOpen");
    
    //we use our custom functions to switch the walkable areas
    WA.Remove(door.GetProperty("door_WAwhenClosed"));
    WA.Restore(door.GetProperty("door_WAwhenOpen"));    
}

static void  Doors::Close_Mute(Object* door) {


    door.Graphic = door.GetProperty("door_imgWhenClosed");
    //player.Say(String.Format("Changed door's graphic to  %d", door.GetProperty("door_imgWhenClosed")));

    int doorId = findDoorIndex(door,  player.Room);
    DoorsData[doorId].isOpen = false;
    door.Baseline = door.GetProperty("door_baselineClosed");
    
    //we use our custom functions to switch the walkable areas
    WA.Remove(door.GetProperty("door_WAwhenOpen"));
    WA.Restore(door.GetProperty("door_WAwhenClosed"));   
}


int AddRoom() {
  
  //error check
  if (nbRooms >= MAX_ROOMS -1) {
    AbortGame("Fatal error: too many rooms to handle doors");
  }
  
  int curRoom = nbRooms;
  nbRooms++;
  
  RoomsData[curRoom].idRoom = player.Room; //we're in what room?
  return curRoom;
  
}

function InitializeDoorsInThisRoom() {

  
  //int roomIndex = AddRoom(); //we create space in the rooms array to store the data
  int roomIndex = player.Room;
  //player.Say(String.Format("Will be scanning doors for room %d", roomIndex));
  
  RoomsData[roomIndex].firstDoorIndex = nbDoorsInTheGame; 
  //player.Say(String.Format("The first door of room %d is %d", roomIndex,  RoomsData[roomIndex].firstDoorIndex));  
  
  int roomObject = 0; //we iterate on every object in the room
  //int nbDoorsInThisRoom = 0;
  
  RoomsData[roomIndex].nbDoors = 0;
  
  while (roomObject < Room.ObjectCount) 
  {
    
      //we test if that object is a door : 
      Object* curObject = object[roomObject];
      if (curObject.GetProperty("door_isDoor") )
      {

          //error check
          if (nbDoorsInTheGame >= MAX_DOORS -1) {
            
            AbortGame("Fatal error: too many doors declared");
          }
      
          int idDoor = nbDoorsInTheGame;
          nbDoorsInTheGame++; //we need to increase it BEFORE we call Open_Mute and Close_Mute, otherwise the error check will fail
          RoomsData[roomIndex].nbDoors++;
          DoorsData[idDoor].objectDoor = curObject;
 
          if (curObject.GetProperty("door_startsClosed") == 0) {
              Doors.Open_Mute(curObject); //we make sure everything is properly initialized
          } else {
              Doors.Close_Mute(curObject);  //we make sure everything is properly initialized
          }
      
      
        
      } //if (curObject.GetProperty("door_isDoor") )
    
    roomObject++; //we continue iterating on the next object in the room
  }
  
  RoomsData[roomIndex].isInitialized = true;
  

  
}



function RestoreDoorsState() {
    int firstIndex = RoomsData[player.Room].firstDoorIndex;
    int lastIndex = firstIndex+RoomsData[player.Room].nbDoors;
    
    int i = firstIndex;
    while (i<lastIndex) {//we iterate through the doors of this room
      if ( DoorsData[i].isOpen)
        Doors.Open_Mute(DoorsData[i].objectDoor); //we force the opening. That will restore the corresponding walkable areas
      else
        Doors.Close_Mute(DoorsData[i].objectDoor); //we force the closing. That will restore the corresponding walkable areas

      i++;
    }
  
}

//makes sure that all the relevant module stuff is initialized
function checkInitialized() {
   //at first call
  if (!moduleInitialized) 
    InitializeModule();
    
  if (!RoomsData[player.Room].isInitialized) //is it the first time ever we enter this room?
    InitializeDoorsInThisRoom();
  else
    RestoreDoorsState(); //we need to do it every time because walkable areas get reset when you leave the room
}



Object* findDoorPlayerArrivedFrom() {
    int firstIndex = RoomsData[player.Room].firstDoorIndex;
    int lastIndex = firstIndex+RoomsData[player.Room].nbDoors;
    
    int i = firstIndex;
    while (i<lastIndex) {//we iterate through the doors of this room
      Object* door = DoorsData[i].objectDoor;
      //we test if the previous room of the player is the room this door is connected to
      if (door.GetProperty("door_targetRoom") == player.PreviousRoom) {
        return door;
      }
      i++;
    }
    //AbortGame("Could not detect through which door the character entered this room");
  return null; //we must be in a cutscene or a teleportation occurred. The player appeared here without coming throuh a door!
}


//everything that happens when you enter the door from door "doorId"
static void Doors::OnEnterRoom() {
  checkInitialized() ; //error checking
  //the character must have the door behind him
  
  if (LastDoorEntered != null) //the only exception will be the very first room of the game, before Indy goes through his first door
  {
    Object* doorPlayerArrivedFrom = findDoorPlayerArrivedFrom();
    if (doorPlayerArrivedFrom != null) {
      //we make sure indy has the door in his back (since he came from that door)
      EnumDirections oppositeDirection = Directions.OppositeDirection(doorPlayerArrivedFrom.door_dirFacingDoor());
      player.FaceDirection(oppositeDirection);
    }
  }
}



 
static void Doors::WalkAndFace(Object* door) {
   checkInitialized() ; //error checking

    //1. walk to the default location set up for that door when the character acts onto it
    player.Walk(door.GetProperty("door_XonAction"), door.GetProperty("door_YonAction"), eBlock);

    //2. face the door
    player.FaceDirection(door.door_dirFacingDoor());
    
}



static bool Doors::IsOpen(Object* door) {
    checkInitialized() ; //error checking
    int doorId = findDoorIndex(door,  player.Room);
    return DoorsData[doorId].isOpen;
}



static void Doors::DefaultReaction_DontWalk (Object* door,  CursorMode mode) {
    checkInitialized() ; //error checking
    
    //face the door
    player.FaceDirection(door.door_dirFacingDoor());
    
    // Open
    if (mode == eModeOpen) {

      if (Doors.IsOpen(door)) { //the door is already open
        player.Say(defaultSentence_Open);
      } else  {                       //the door is currently closed; we open it
        PlaySound(door.GetProperty("door_openSound"));
        Doors.Open_Mute(door);
      }
    }
    
    // Close
    else if (mode == eModeClose) {
       
       if (Doors.IsOpen(door) == false) { //the door is already closed
        player.Say(defaultSentence_Close);
      } else  {                                 //the door is currently open; we close it
        PlaySound(door.GetProperty("door_closeSound"));
        Doors.Close_Mute(door);
      }
    }
    else //every other mode
    {
      //select the default sentence depending on the cursor mode
      String sentence;
      
      if (mode == eModePull) sentence = defaultSentence_Pull;               //Pull
      else if (mode == eModePush) sentence = defaultSentence_Push;          //Push
      else if (mode == eModeGive) sentence = defaultSentence_Give;          // Give
      else if (mode == eModeInteract) sentence = defaultSentence_Interact;  // Interact
      else if (mode == eModeLookat) sentence = defaultSentence_Look;        // Look
      else if (mode == eModePickUp) sentence = defaultSentence_PickUp;      // Pickup
      else if (mode == eModeTalkto) sentence = defaultSentence_Talk;        // Talk
      else if (mode == eModeUseinv) sentence = defaultSentence_UseInv;      // Useinv   
      
      //finally, say the default sentence
      player.Say(sentence);
    }
    
    
    
   
}

static void Doors::DefaultReaction_WalkFirst(Object* door,  CursorMode mode) {
    checkInitialized() ; //error checking

    //1. walk to the default location set up for that door when the character acts onto it
    player.Walk(door.GetProperty("door_XonAction"), door.GetProperty("door_YonAction"), eBlock);
    
    //2. Do the default behaviour for that door
    Doors.DefaultReaction_DontWalk(door,  mode); 
}

/*
static void Doors::CustomReaction_WalkFirst(int doorId,  CursorMode mode,  String customStence) {
    checkInitialized() ; //error checking
}
*/

/*
static void Doors::CustomReaction_DontWalk(int doorId,  CursorMode mode,  String customStence) {
    checkInitialized() ; //error checking
  
}
*/





function ChangeRoom_ThroughDoor(this Character*,  Object* door) {
  checkInitialized() ; //error checking
  int targetRoom = door.GetProperty("door_targetRoom");
  //player.Say(String.Format("Going to room %d", targetRoom));
  LastDoorEntered = door;
  this.ChangeRoom(targetRoom,  door.GetProperty("door_targetX"),  door.GetProperty("door_targetY"));
  
}


static bool Doors::IsModeOpen(Object* door,  CursorMode mode) {
  checkInitialized() ; //error checking
  
  if (mode == eModeOpen)
    return true;
    
  if (mode == eModeInteract && !Doors.IsOpen(door))
    return true;
  
  return false;
}





