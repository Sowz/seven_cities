
/////////////////////////////////////////////////////
//
//
//      DIALOGS VARIABLES
//      We use them like global variables, but in a module (I hate global variables)
//
//////////////////////////////////////////////////////

#define MAXDIALOGVAR 100

int values[MAXDIALOGVAR];

static void DialogsLogic::SetVar(DialogVars var,  int value) {
  values[var]= value;
}


static bool DialogsLogic::GetVar(DialogVars var) {
  if (values[var] != 0) return true;
  return false;
}




/////////////////////////////////////////////////////
//
//
//      UTILITY FUNCTIONS
//
//
//////////////////////////////////////////////////////

static void CharactersLogic::setIndyView_suit() {
  //cIndy.ChangeView(INDY_SUIT); //set Indy's view to Indy_suit
  cIndy.ChangeView(INDY_SUIT_2); //set Indy's view to Indy_suit
  cIndy.SpeechView = INDY_SUIT_TALK;  
}

/*
  if        (mode == eModePush) {  
  
  } else if (mode == eModePull) {  

  } else if (mode == eModeGive) {  
  
  } else if (mode == eModeOpen) {  

  } else if (mode == eModeClose) {  

  } else if (mode == eModeInteract) {  

  } else if (mode == eModeTalkto) {  

  } else if (mode == eModeLookat) {  
  
  } else if (mode == eModePickUp) {  
  
  } else if (mode == eModeUseinv) {  
  
  }   
*/



/////////////////////////////////////////////////////
//
//
//      CHARACTERS LOGIC
//
//
//////////////////////////////////////////////////////


static void CharactersLogic::Mulbray(CursorMode mode) {
  /*
  int charX = 167;
  int charY = 131;
  Character* charac = cMulbray;
  
  cIndy.Walk(charX, charY, eBlock);
  cIndy.FaceCharacter(charac, eBlock);
  
  if        (mode == eModePush) {  
      cIndy.Say("Maybe later...");
  } else if (mode == eModePull) {  
      cIndy.Say("I can't pull him, he's not a lever.");
  } else if (mode == eModeGive) {  
      if (GetGiveItem() == iWallet.ID) {
        cIndy.Say("I don't think Mulbray needs to see my wallet.");
      } else if (GetGiveItem() == iBarnett_Hammer1.ID || GetGiveItem() == iBarnett_Hammer2.ID ) {
        cIndy.Say("How would you tell which hammer is genuine, and which one is fake?");
        cMulbray.Say("Hmm... They look exactly the same. That's amazing.");
        cMulbray.Say("It's that student.. You know? the head of copy club.");
        cMulbray.Say("He's really brought copy techniques to a whole new level.");
        cMulbray.Say("...But I'd say this is the genuine hammer.");
        DialogsLogic.SetVar(eDialog_IndySortedHammers,  1);
        iBarnett_Hammer1.Name= "genuine hammer";
        iBarnett_Hammer2.Name= "copy of hammer";
        cIndy.Say("Thanks a lot!");
      } else {
        cIndy.Say("I don't think he'd like that.");
      }  
  } else if (mode == eModeOpen) {  
      cIndy.Say("Mulbray isn't a door.");
  } else if (mode == eModeClose) {  
      cIndy.Say("Mulbray isn't a door.");
  } else if (mode == eModeInteract) {  
      cIndy.Say("That won't work.");
  } else if (mode == eModeTalkto) {  
      cIndy.Say("Hello, Professor...");
      cMulbray.FaceCharacter(cIndy, eBlock);
      cMulbray.Say("Welcome back, Doctor Jones... I trust your trip to the Orient went well?");
      cIndy.Say("Yes, I guess it did...");
      cMulbray.Say("Well, that's good to hear.");
      dMulbray1.Start();
  } else if (mode == eModeLookat) {  
      cIndy.Say("It's Professor Mulbray.");  
  } else if (mode == eModePickUp) {  
      cIndy.Say("I can't pick up Mulbray...");  
  } else if (mode == eModeUseinv) {  
      cIndy.Say("That wouldn't do anything.");  
  }  
  */
}





static void CharactersLogic::Irene(CursorMode mode) {
  /*
  int charX = 177;
  int charY = 120;
  Character* charac = cIrene;
  
  cIndy.Walk(charX, charY, eBlock);
  cIndy.FaceCharacter(charac, eBlock);
  
  if        (mode == eModePush) {  
    cIndy.Say("Why would I want to do that?!");
  } else if (mode == eModePull) {  
    cIndy.Say("Why would I want to do that?!");
  } else if (mode == eModeGive) {  
    if (GetGiveItem() == iKey.ID) {
      cIndy.Say("No, I have a feeling I'll need it.");
    } else {
      cIndy.Say("I don't think she'd like that.");
    }
  } else if (mode == eModeOpen) {  
    cIndy.Say("No.");
  } else if (mode == eModeClose) {  
    cIndy.Say("That won't work.");
  } else if (mode == eModeInteract) {  
    cIndy.Say("Not now, maybe later...");
  } else if (mode == eModeTalkto) {  
    cIndy.Say("Good afternoon, Irene.");
    cIrene.Say("Good afternoon, and welcome back Doctor Jones.");
    dIrene1.Start();
  } else if (mode == eModeLookat) {  
    cIndy.Say("It's Irene, my secretary.");
  } else if (mode == eModePickUp) {  
    cIndy.Say("There's no way I'd ever do that.");
  } else if (mode == eModeUseinv) {  
    cIndy.Say("That won't work."); 
  }   */
}

  
  
static void CharactersLogic::Biff(CursorMode mode) {
  /*
  if (cBiff.Room == 3) { //behaviour when biff is in Barnett's corridor
    int charX = 840;
    int charY = 126;
    Character* charac = cBiff;
    
    cIndy.Walk(charX, charY, eBlock);
    cIndy.FaceCharacter(charac, eBlock);
    
    if        (mode == eModePush) {  
      cIndy.Say("He's a jerk, but that doesn't mean I should be pushing them around.");
    } else if (mode == eModePull) {  
      cIndy.Say("He's a jerk, but that doesn't mean I should be pushing them around.");
    } else if (mode == eModeGive) {  
      if (GetGiveItem() == iWallet.ID) {
        cIndy.Say("I have no need to bribe them.");
        cIndy.Say("... But I'd pay him if he'd wash my car.");
      } else {
        cIndy.Say("I doubt that would change anything.");
      }
    } else if (mode == eModeOpen) {  
    cIndy.Say("That can't work.");
    } else if (mode == eModeClose) {  
    cIndy.Say("That can't work.");
    } else if (mode == eModeInteract) {  
     cIndy.Say("He's a jerk, but that doesn't mean I should be pushing them around.");
    } else if (mode == eModeTalkto) {  
    if (bullyTalk == false) {
      cIndy.Say("Hello, Biff...");
      cBiff.Say("Hey teach, you have some nerve for flunking us!");
      cIndy.Say("Ah yes, that last test...");
      cBiff.Say("Yeah, well me and Bruno aren't happy about it!");
      bullyTalk = true;
      dBully1.Start();
    } else {
      cIndy.Say("Talking to them anymore would be a waste of time.");
    }
    } else if (mode == eModeLookat) {  
    cIndy.Say("One of Barnett College's juvenile delinquents.");
    } else if (mode == eModePickUp) {  
    cIndy.Say("No, that wouldn't be good idea..");
    } else if (mode == eModeUseinv) {  
    cIndy.Say("I don't think so.");
    }  
  } //if (cBiff.Room == 3)
  */
  
}




  
static void CharactersLogic::Bruno(CursorMode mode) {
 Character* cBruno;
 
  if (cBruno.Room == 3) { //behaviour when biff and bruno are in Barnett's corridor
    int charX = 840;
    int charY = 126;
    Character* charac = cBruno;
    
    cIndy.Walk(charX, charY, eBlock);
    cIndy.FaceCharacter(charac, eBlock);
    
    if        (mode == eModeTalkto) {  
          cIndy.Say("He doesn't seem to be the talkative type.");
    } else {
      CharactersLogic.Biff(mode);
    }
  } //if (cBiff.Room == 3)
  
}




///////////////////////////////////////
//
//    STUDENTS IN INDY'S CLASSROOM
//
///////////////////////////////////////



static bool CharactersLogic::AllStudentsGaveTheirPreferences() {
  if (    DialogsLogic.GetVar(eDialog_Student2gaveHisPreference)  != 0
      &&  DialogsLogic.GetVar(eDialog_Student5gaveHisPreference)  != 0
      &&  DialogsLogic.GetVar(eDialog_Student6gaveHisPreference)  != 0
      &&  DialogsLogic.GetVar(eDialog_Student7gaveHisPreference)  != 0)
  {
      return true;
  }
  return false;
}

static void CharactersLogic::Students_AllGaveTheirPreferences_Reaction1() {
  
     if (CharactersLogic.AllStudentsGaveTheirPreferences() )
     {
       player.FaceDirection(eRight);
       player.Say("Come on, Jones, you've asked enough questions now...");
       player.Say("...You should be able to come up with something without guessing.");
       player.FaceDirection(eLeft);
     }
       
}


static void CharactersLogic::Students_AllGaveTheirPreferences_Reaction2() {
  
     if (!CharactersLogic.AllStudentsGaveTheirPreferences() )
     {
       player.FaceDirection(eRight);
       player.Say("I won't get anywhere that way...");
       player.Say("...I can't just make up topics.");
       player.FaceDirection(eLeft);
     }  
}




function ShowCompass() {
  Display("ShowCompass: not implemented yet");
}


//coordinates where Indy must walk before talking to the students
int studentsWalktoX = 154;
int studentsWalktoY = 137;

//sleeping biff
static void CharactersLogic::Student1(CursorMode mode) {

     Character* cStudent01;
    if        (mode == eModeTalkto) {  
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      //dStudent1.Start();
    } else if        (mode == eModeGive) { 
      if (GetGiveItem() == iCompass.ID) {
        player.Say("What do you think of that interesting piece of history, young man?");
        ShowCompass();
        cStudent01.Say("...ZzzZZzzzz...");
        player.Say("I should throw it at his face.");
      } else {
        WontGive();
      }
      
    } else { //Indy doesn't walk there, and just comments on the silly action
      player.DoStandard2(eLeft, eCharacter);
    }
    
  
}

//Sandy
static void CharactersLogic::Student2(CursorMode mode) {
      Character* cStudent02;
    if        (mode == eModeTalkto) {  
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      player.Say("Sandy, I understand you'll be talking on behalf of your fellow students?");
      //cStudent05.Say("Yes, professor.");
      //dStudent2.Start();
    } else if        (mode == eModeGive) { 
      if (GetGiveItem() == iCompass.ID) {

        player.Say("Don't you find that artifact interesting?");
        ShowCompass();
        //cStudent05.Say("It looks nice, professor. What is it exactly?");   
        //does Indy know what the compass is? did he read its tag?
        if (DialogsLogic.GetVar(eDialog_LookedAtCompassTag)) {
          DialogsLogic.SetVar(eDialog_ShowedCompassToStudents,  1); //we set a flag to remember that Indy showed the item to the students at least once
          player.Say("It's a metal compass from the early Ottoman Empire.");
          //cStudent05.Say("Oh, professor, that sounds like a fascinating starting point!"); 
          //cStudent05.Say("I'm sure this artifact would stimulate us all!");           
          //cStudent05.Say("But what subject do you want us to write about, based on it?");   
          if (CharactersLogic.AllStudentsGaveTheirPreferences()) { //INdy knows what each student likes
            player.Say("Sandy, that's very simple.");
            player.Say("I suggest...");
            //if (!DialogsLogic.GetVar(eDialog_FoundProperSubject))
              //dStudent2_HowAbout2.Start();  //Indy suggests proper solutions
            //else
              //dStudent2_HowAbout3.Start(); //Indy has already resolved that puzzle
          } else { //he doesn't know yet
            player.Say("Well Sandy, I, erm....");
            player.Say("I suppose you could write on...");         
            //dStudent2_HowAbout.Start(); //Indy suggests goofy solutions
          }
        } else {  
           player.Say("Well, it's a...");
           player.Say("It's definitely...");  
           player.Say("Give me a second, Sandy, I can't answer all the questions at the same time!");
           player.FaceDirection(eRight);
           player.Say("I'm growing old if I let students outsmart me...");
           player.FaceDirection(eLeft);
        }

      } else {
        WontGive();
      }
    } else { //Indy doesn't walk there, and just comments on the silly action
      player.DoStandard2(eLeft, eCharacter);
    }
    
  
}

//Wendy
static void CharactersLogic::Student5(CursorMode mode) {
      Character* cStudent05;
    if        (mode == eModeTalkto) {  
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVar(eDialog_SandyHasExplainedTheProblem)) { //Sandy hasn't explained the issue yet
        player.Say("Now, Wendy, you're a reasonable student. What's the matter?");
        //cStudent05.Say("Professor, you should ask Sandy, she's the class president.");
      }  else {
        //dStudent5.Start();
      }
    } else if        (mode == eModeGive) { 
      if (GetGiveItem() == iCompass.ID) {
        player.Say("Doesn't that artifact stimulate your curiosity?");
        ShowCompass();
        cStudent05.Say("Hmm...Interesting. Show it to Sandy, professor.");
      } else {
        WontGive();
      }
      
    } else { //Indy doesn't walk there, and just comments on the silly action
      player.DoStandard2(eLeft, eCharacter);
    }
    
    
}

//Ron
static void CharactersLogic::Student6(CursorMode mode) {
      //Character* //;
    if        (mode == eModeTalkto) {  
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVar(eDialog_SandyHasExplainedTheProblem)) { //Sandy hasn't explained the issue yet
        player.Say("Well, well, Ron. What's all the fuss about?");
        //.Say("Sandy, please explain Professor Jones what the issue is.");
      } else {
        //dStudent6.Start();
      }
    } else if        (mode == eModeGive) { 
      if (GetGiveItem() == iCompass.ID) {
        player.Say("That artifact catches the eye, doesn't it?");
        ShowCompass();
        //.Say("It lsure does, professor. But show it to Sandy, please.");
      } else {
        WontGive();
      }

    } else { //Indy doesn't walk there, and just comments on the silly action
      player.DoStandard2(eLeft, eCharacter);
    }
    
    
}

//Syd
static void CharactersLogic::Student7(CursorMode mode) {
      Character* cStudent07;
    if        (mode == eModeTalkto) {  
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVar(eDialog_SandyHasExplainedTheProblem)) { //Sandy hasn't explained the issue yet
        player.Say("Young man, why don't you start from the beginning?");
        //cStudent05.Say("I think it's better if you ask Sandy, professor.");
        //cStudent05.Say("She's better at explaining.");
      } else {
        //dStudent7.Start();
      }
    } else if        (mode == eModeGive) { 
      if (GetGiveItem() == iCompass.ID) {
        player.Say("I'm sure you could write a brilliant essay, based on that.");
        ShowCompass();
        //cStudent05.Say("Professor, maybe Sandy could have a closer look?");
      } else {
        WontGive();
      }
      
    } else { //Indy doesn't walk there, and just comments on the silly action
      player.DoStandard2(eLeft, eCharacter);
    }
    
    
}


static void CharactersLogic::Students_SpeakFast(String s1,  String s2,  String s3,  String s4) {
  int readingSpeed= Game.TextReadingSpeed; //we save the current reading speed
  Game.TextReadingSpeed = FloatToInt(IntToFloat(Game.TextReadingSpeed) * 5.0);// we increase it temporarily
  
  //randomize the order of the sentences and who says what
  String s[4];
  Character* c[4];
  int i=0;
  while (i<4) { //four sentences, four characters
    bool ok = false;
    //randomize sentences
    while (!ok) {
      int j = Random(3);
      if (s[j] == null) { //only an empty slot can stop the iteration
          ok = true;
          if (i==0) s[j] = s1;
          if (i==1) s[j] = s2;
          if (i==2) s[j] = s3;
          if (i==3) s[j] = s4;
      }
    }
    
         Character* cStudent01;
              Character* cStudent02;
                   Character* cStudent05;
                        Character* cStudent06;
                             Character* cStudent07;
    ok=false;
    //randomize characters
    while (!ok) {
      int j = Random(3);
      if (c[j] == null) { //only an empty slot can stop the iteration
          ok = true;
          if (i==0) c[j] = cStudent02;
          if (i==1) c[j] = cStudent05;
          if (i==2) c[j] = cStudent06;
          if (i==3) c[j] = cStudent07;
      }
    }
    i++;
  }
  
  //make them say the sentences
  i = 0;
  while (i<4) {
    Character* ch = c[i];
    ch.Say(s[i]);

    i++;
  }
  
  Game.TextReadingSpeed =readingSpeed; //back to normal
}


///////////////////////
//
//    STUDENTS PUZZLE
//
//    Indy must pick all correct 4 parts of a sentence to create a proper essay subject
//
///////////////////////

int sentence_parts[4]; //the essay's subject is made of four parts

static void CharactersLogic::Students_SetSubjectPart(int part,  int answerChosen) //the essay's subject is made of 4 parts (location, era, etc.) For each part there are 4 possible answers
{
  //"part" must be in between 1 and 4
  //"answerChosen" must be between 1 and 4
  sentence_parts[part-1]= answerChosen-1; //see the arrays contents description to understand that formula
}

static void CharactersLogic::Students_ResetSubject() //resets all parts of the essay's subject
{
  int i=0;
  while (i<4) 
  {
    sentence_parts[i]= -1;
    i++;
  }
  
}

static bool CharactersLogic::Students_ComputeSubject()   //tells if Indy picked all correct 4 parts for the essay's subject
{
  //Display("Not implemented yet: Students_ComputeSubject");
  
  if (      sentence_parts[0] == 0
        && sentence_parts[1] == 2
        && sentence_parts[2] == 0
        && sentence_parts[3] == 2
  ) 
  {//SUCCESS!  
    DialogsLogic.SetVar(eDialog_FoundProperSubject, 1); 
    //the students will react positively in dStudent2_HowAbout3
  }
  else
  { //FAILURE!
       Character* cStudent07;
      if (  sentence_parts[0] == 1 /*giant stone strcutures*/
          || sentence_parts[0] == 2 //metal foundries design
          || sentence_parts[0] == 3) //clay extraction
      {
        int random = Random(1); //we generate two sentences that mean the same thing, to make the clue less obvious
        
      }
      
      if (sentence_parts[1] == 3) //religion
      {
          //cStudent06.Say("Here we go again. Religion, religion, religion.");    
      }
      else if (sentence_parts[1] == 0 //trading
              || sentence_parts[1] == 1 )//catling
      {
          //cStudent06.Say("So much for visual expression.");   
      }

      if (sentence_parts[2] == 1 //padua
      || sentence_parts[2] == 2 )//rome
      {
          //.Say("And I have a feeling this class is a bit Europe-centered.");    
      }

      if (sentence_parts[3] == 0 /* /attila*/ && sentence_parts[2] != 2 /*not rome*/) 
  
      {
          //cStudent05.Say("What does Attila have to do with any of this?");   
      }
      else if (sentence_parts[3] == 1 /*scipio */ && (sentence_parts[2] == 0 /*constantinople*/ ||sentence_parts[2] == 3/*goa*/ ||sentence_parts[2] == 1/*padua*/) ) //
      {
          //cStudent05.Say("That doesn't even make sense historically!");   
      }
      else if (sentence_parts[3] == 3 /*barbarossa */ && sentence_parts[2] == 3/*goa*/  ) //
      {
          //cStudent05.Say("The German Romans setting colonies in India? Well that's new...");  
          //cStudent05.Say("Does every essay have to deal with Antiquity or the Middle Ages?");
      }      
      else if (sentence_parts[3] == 3 /*barbarossa */ && sentence_parts[2] == 2/*rome*/  ) //
      {
          //cStudent05.Say("Professor, why do you pick the city of Rome?");
          //cStudent05.Say("It wasn't the center of the Empire at the time..."); 
          //cStudent05.Say("Does every essay have to deal with Antiquity or the Middle Ages?");
      }      
        
      player.Say("Now, now. Enough complaining. That subject is not perfect, alright.");
      player.Say("I made a mistake. Let me fix that.");

  }
}


static void CharactersLogic::RepeatSolution() //Indy recaps the proper solution.
{
  
}
  
