

///////////////////////////////////
//
//        CHECKPOINTS/DEBUG POPUP
//
///////////////////////////////////



bool NoMusic_checked = true;

static void DebugGUI::Show()
{
  gCheckpoints.Visible = true;
  EnableInterface();    //Safety
  mouse.Visible = true; //Safety
  
  if (NoMusic_checked)
    ButtonNoMusic.NormalGraphic = 360;
  else 
    ButtonNoMusic.NormalGraphic = 359;
}

static void DebugGUI::Hide()
{
  gCheckpoints.Visible = false;
}

static void DebugGUI::OnButtonClick()
{
  int checkpointIndex = ListBoxCheckpoints.SelectedIndex +1; //the listbox items indices are zero-based
  DebugGUI.Hide();
  
  if (NoMusic_checked) {
    //Display("No music");
    System.Volume = 0;
  }
  
  CheckPoints.JumpTo(checkpointIndex);

}



static void DebugGUI::OnNoMusicClick() {
  if (NoMusic_checked) {
    NoMusic_checked = false;
    ButtonNoMusic.NormalGraphic = 359;
  } else {
    NoMusic_checked = true;
    ButtonNoMusic.NormalGraphic = 360;
  }
  
}



///////////////////////////////////
//
//        CUSTOM INVENTORY
//
///////////////////////////////////



static void CustomInventory::Init() {
  invCustomInv.ItemWidth = 32;
  invCustomInv.ItemHeight = 24;
  gInventory.Visible = false;  
}
static void CustomInventory::ScrollUp() {
  invCustomInv.ScrollUp();  
} 
static void CustomInventory::ScrollDown() {
  invCustomInv.ScrollDown();    
}
  
static void CustomInventory::OnMouseClick(MouseButton button) {
  if ( button == eMouseLeftInv) {
    ActionsLogic.Items_OnLeftClick();
  } else if ( button == eMouseRightInv) {
    ActionsLogic.Items_OnRightClick();
  }
  
}


   
     
///////////////////////////////////
//
//        MISCELLANEOUS UI
//
///////////////////////////////////

  
static void GUIlogic::InitializeGUI() {

  // called when the game starts, before the first room is loaded
  CustomInventory.Init();
  
    
  gDialog.Visible = false;
  gDialog2.Visible = false;
  gControlmenu.Visible = false;
  gSave.Visible = false;
  gControlmenu.Centre();
  gStatusline.Visible = false;
  gIconbar.Visible = false;

  gMainMenu.Visible = false;
  gMenuMenu.Visible = false;
  
}


void Highlight_PickUp() {
  Display("Highlight_PickUp not implemented");
}

void Highlight_Open() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 147;
    btnTalkTo.NormalGraphic = 144;
    btnLookAt.NormalGraphic = 140;
}

void Highlight_LookAt() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 146;
    btnTalkTo.NormalGraphic = 144;
    btnLookAt.NormalGraphic = 141;

}

void Highlight_TalkTo() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 146;
    btnTalkTo.NormalGraphic = 145;
    btnLookAt.NormalGraphic = 140;  
}

void Highlight_Nothing() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 146;
    btnTalkTo.NormalGraphic = 144;
    btnLookAt.NormalGraphic = 140;  
}

static void GUIlogic::HighlightActionButton(CursorMode cursor ) {
  if (cursor == eModeClose) {
    Display("Not implemented");
  } else if (cursor == eModeOpen) {
    Highlight_Open();
   } else if (cursor == eModeLookat) {
    Highlight_LookAt();
  } else if (cursor == eModePickUp) {
    Highlight_PickUp();
  } else if (cursor == eModeTalkto) {
    Highlight_TalkTo();
  } else if (cursor == eModeWalkto) { //'walk to' isn't worth highlighting anything
    Highlight_Nothing();
  }

}


static void GUIlogic::UpdateStatusBar() {
    
    // Walk
    if (mouse.Mode == eModeWalkto) {
      Status.Text = "Walk to @OVERHOTSPOT@";
    }
    // Look At
    if (mouse.Mode == eModeLookat) {
      Status.Text = "Look at @OVERHOTSPOT@";
    }
    // Use
    if (mouse.Mode == eModeInteract) {
      Status.Text = "Use @OVERHOTSPOT@";
    }
    // Talk To
    if (mouse.Mode == eModeTalkto) {
      Status.Text = "Talk to @OVERHOTSPOT@";
    }
    // Open
    if (mouse.Mode == eModeOpen) {
      Status.Text = "Open @OVERHOTSPOT@";
    }
    // Close
    if (mouse.Mode == eModeClose) {
      Status.Text = "Close @OVERHOTSPOT@";
    }
    // Push
    if (mouse.Mode == eModePush) {
      Status.Text = "Push @OVERHOTSPOT@";
    }
    // Pull
    if (mouse.Mode == eModePull) {
      Status.Text = "Pull @OVERHOTSPOT@";
    }
    // Pickup
    if (mouse.Mode == eModePickUp) {
      Status.Text = "Pick up @OVERHOTSPOT@";
    }
    // Give
    if (mouse.Mode == eModeGive) {
      int giveItem = game.inv_activated;
      if (giveItem < 1) { // no specified item
        ResetGiveItem(); //at the moment there is no give item
        Status.Text = "Give @OVERHOTSPOT@";
      } else {
        SetGiveItem(giveItem);
        Status.Text = String.Format("Give %s to @OVERHOTSPOT@", inventory[giveItem].Name);
      }
    }
    

    if (mouse.Mode == eModeUseinv) {
      
      if (player.ActiveInventory == null) { // No inventory...
        Status.Text = "Use @OVERHOTSPOT@";
      } else {
        Status.Text = String.Format("Use %s with @OVERHOTSPOT@", inventory[player.ActiveInventory.ID].Name); 
      }
    }

}




static void GUIlogic::PlayerUI_Disable()
{
 
  //PauseGame();
  DisableInterface();
}

static void GUIlogic::PlayerUI_Enable()
{

  UnPauseGame(); //safety
  EnableInterface();    
}


static void GUIlogic::PlayerUI_DisableAndHide()
{
 
  GUIlogic.PlayerUI_Disable();

  
  //gInventory.Clickable = false; //doesn't make sense, considering the line below)
  gInventory.Visible = false;
  //gIconbar.Clickable = false; //doesn't make sense, considering the line below)
  gIconbar.Visible = false;
  gStatusline.Visible = false;
  gControlmenu.Visible = false; //safety
  
}

static void GUIlogic::PlayerUI_EnableAndShow()
{

  GUIlogic.PlayerUI_Enable();  
  
  //gInventory.Clickable = true; //doesn't make sense, considering the line below)
  gInventory.Visible = true;
  //gIconbar.Clickable = true; //doesn't make sense, considering the line below)
  gIconbar.Visible = true;
  gStatusline.Visible = true;
  //gControlmenu.Visible = true;
          
}


static void GUIlogic::EnterPause()
{
  PauseGame();
  GUIlogic.PlayerUI_Disable();
  Mouse.Visible = false; 
  gPauseBar.Visible = true;
}

static void GUIlogic::ExitPause()
{
  UnPauseGame();
  GUIlogic.PlayerUI_Enable();
  Mouse.Visible = true;  
  gPauseBar.Visible = false;
}


 
 
static bool GUIlogic::IsMainMenuOrSplashscreen()
{
  if (player.Room == 1) 
    return true;
  else
    return false;
}

 
 bool spaceIsHeldToPause, spaceIsHeldToUnpause;
    
// Note: the function below comes from here :
// http://www.adventuregamestudio.co.uk/forums/index.php?topic=42678.msg566300#msg566300
// Credit goes to Ryan Timothy .
static void GUIlogic::HandleSpaceBar()
{
    
    //[Mathieu] I defined our own 'enum', because I don't think the ones available for 'StarCutScene'
    // (eSkipAnyKeyOrMouseClick, etc.) are exactly the same as the values available for 'SetSkipSpeech'
    int eSkipAnyKeyOrMouse  = 0; //any keystroke or mouse click
    int eSkipNone           = 2; //nothing can skip the cutscene.
    
    if (IsKeyPressed(eKeySpace) && !IsGamePaused())
    {
  //    SetSkipSpeech(eSkipNone);
      //PauseGame();
      GUIlogic.EnterPause();
      spaceIsHeldToPause=true;
    }
    else if (spaceIsHeldToPause && !IsKeyPressed(eKeySpace)) spaceIsHeldToPause=false;
    else if (!spaceIsHeldToPause && IsKeyPressed(eKeySpace) && IsGamePaused()) spaceIsHeldToUnpause=true;
    else if (spaceIsHeldToUnpause && !IsKeyPressed(eKeySpace) && IsGamePaused())
    {
   //   SetSkipSpeech(eSkipAnyKeyOrMouse);
      //UnPauseGame();
      GUIlogic.ExitPause();
      spaceIsHeldToUnpause=false;
    }
    
}



static void GUIlogic::MainMenu_Show()
{
   
  //in case the secondary popups are already visible, we hide them
  gMenuMenu.Visible = false; //that's the little confirmation popup that we use from time to time
  gDialog.Visible = false;
  gDialog2.Visible = false;

  //we show only the "real" menu screen
  gMainMenu.Visible = true;  
}


static void GUIlogic::MainMenu_Hide()
{
  //we hide everything
  gMenuMenu.Visible = false; //that's the little confirmation popup that we use from time to time
  gDialog.Visible = false;
  gDialog2.Visible = false;
  gMainMenu.Visible = false;  
}

    
static void ControlPanel::Enter()
{ 
    GUIlogic.PlayerUI_DisableAndHide(); //hides the inventory, etc. and makes them unclickable
    gControlmenu.Visible = true; //show our little menu popup
    
    Mouse.Visible = true; //we make sure the mouse is visible in case we were in a cutscene, or a pause, or something
    EnableInterface();    //same as above
    
}


static void ControlPanel::Exit()
{
    GUIlogic.PlayerUI_EnableAndShow(); //shows the inventory, etc. and makes them clickable
    gControlmenu.Visible = false; //hide our little menu popup
     
    
    Mouse.Visible = true; //that should already be the case... but just in case!
    EnableInterface();    //that should already be the case... but just in case!
}


    
///////////////////////////////////
//
//        CUSTOM LOAD
//
///////////////////////////////////



int loadVar = 0; //this is meant to help detecting a double-click (I think)

static void CustomLoad::ManageTimer() {
  //if (IsTimerExpired(2)) { // if you click after 1 second you continue normal process of load-click
  if (Timer.IsExpired("timer_load")) {
    loadVar = 0; // otherwise if you click within 1 second loadVar stays on 1 so it can become 2 and thus load game through double click
  } 
  
}

static void CustomLoad::OnSelectionChange(GUIControl *control) {
  //put the selection in the save txt box
  txtLoadName.Text = lstLoadGames.Items[lstLoadGames.SelectedIndex];
  
  if (gLoad.Visible == true) {
    loadVar += 1; //Check if load-click should happen
    //SetTimer(2, 40);
    Timer.Set("timer_load", 40);
    
    // check for double-click 
    if (loadVar == 2) {  
      int totalLoads = lstLoadGames.ItemCount; //holds number of saves in the list
      if (totalLoads >= 1) {
        txtLoadName.Text = lstLoadGames.Items[0];
        String loadName = txtLoadName.Text; //holds TXT for Save Name; from use
        //check that a name was entered to avoid problems
        if(loadName == "") {
          Display("Please select a saved game to be loaded.");
          return;
        }
        //no highlighted item
        if (lstLoadGames.SelectedIndex == -1) {
          Display("Please select a saved game to be loaded");
        }
        //an item is selected...
        else if(lstLoadGames.SelectedIndex >= 0) {
          RestoreGameSlot(savegameindex[lstLoadGames.SelectedIndex]);
          gLoad.Visible = false;
          
          /*
          UnPauseGame();
          EnableInterface();
          gIconbar.Clickable = true;
          gInventory.Clickable = true          */
          GUIlogic.PlayerUI_EnableAndShow();
        }
      } else {
        Display("Sorry, no save files have been detected.");
      }
    } else {
    }
  }
}

static void CustomLoad::Show() {
  txtLoadName.Clickable = false;
  txtLoadName.Enabled = false;
  //Prep the GUI
  lstLoadGames.FillSaveGameList();
  lstLoadGames.SelectedIndex = 0;
  //Activate the load GUI
  gLoad.Visible = true;
  gLoad.Centre();   

  
}

static void CustomLoad::Done_OnClick() {
  /*
  UnPauseGame();
  EnableInterface();
  gIconbar.Clickable = true;
  gInventory.Clickable = true;
  */
  GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)
  gControlmenu.Visible = false;
  gLoad.Visible = false;
  if (player.Room == 1) {
    gMainMenu.Visible = true;
  } 
}

static void CustomLoad::Load_OnClick() {

  int totalLoads = lstLoadGames.ItemCount; //holds number of saves in the list
  if (totalLoads >= 1) {
    txtLoadName.Text = lstLoadGames.Items[0];
    
    String loadName = txtLoadName.Text; //holds TXT for Save Name; from use
    //check that a name was entered to avoid problems
    if(loadName == "") {
      Display("Please select a saved game to be loaded.");
      return;
    }
    //no highlighted item
    if (lstLoadGames.SelectedIndex == -1) {
      Display("Please select a saved game to be loaded");
    }
    //an item is selected...
    else if(lstLoadGames.SelectedIndex >= 0) {
      RestoreGameSlot(savegameindex[lstLoadGames.SelectedIndex]);
      gLoad.Visible = false;
      /*
      UnPauseGame();
      EnableInterface();
      gIconbar.Clickable = true;
      gInventory.Clickable = true;
      */
      //GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)
      ControlPanel.Exit();

    }
  } else {
    Display("Sorry, no save files have been detected.");
  }
}

///////////////////////////////////
//
//        CUSTOM SAVE
//
///////////////////////////////////


static void CustomSave::Show() {
  //Prep the GUI
  lstSaveGames.FillSaveGameList();
  lstSaveGames.SelectedIndex = 0; // start at first save
  if(lstSaveGames.SelectedIndex != -1)
  {
    txtSaveName.Text = lstSaveGames.Items[lstSaveGames.SelectedIndex];
  }
  //Activate the save GUI
  gSave.Visible = true;
  gSave.Centre();  
}

static void CustomSave::Done_OnClick() {
  gControlmenu.Visible = false;
  gSave.Visible = false;
  /*
  UnPauseGame();
  EnableInterface();
  gIconbar.Clickable = true;
  gInventory.Clickable = true;
  */
  GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)

}


static void CustomSave::Save_OnClick() {
  int totalSaves = lstSaveGames.ItemCount; //number of saves on list
  String saveName = txtSaveName.Text; //holds value of txtSaveName

  // check for a save name. If none, tell them.  Else, go on.
  if(saveName == "") {
    Display("Please enter a name for your saved game.");
    return;
  }
  //If there is no saved games yet, just save it.
  if(lstSaveGames.SelectedIndex == -1) {
    gSave.Visible = false;
    SaveGameSlot(totalSaves+1, saveName);
    /*
    UnPauseGame();
    EnableInterface();
    gIconbar.Clickable = true;
    gInventory.Clickable = true;*/
    //GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)
    ControlPanel.Exit();

  } else {
    int checkSave = 0; //runs through the list and checks for double entries
    while(checkSave != totalSaves) {
      if(saveName == lstSaveGames.Items[checkSave]) {
        //if so, overwrite the selected save game
        gSave.Visible = false;
        SaveGameSlot(savegameindex[checkSave], saveName);
        /*
        UnPauseGame();
        EnableInterface();
        gIconbar.Clickable = true;
        gInventory.Clickable = true;*/
        //GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)
        ControlPanel.Exit();
        return;
      }
      checkSave++;
    }
    //if we've made it here, then there is no match; just save to a new slot.
    if(totalSaves < 20) {
      gSave.Visible = false;
      SaveGameSlot(totalSaves+1, saveName);
      /*
      UnPauseGame();
      EnableInterface();
      gIconbar.Clickable = true;
      gInventory.Clickable = true;*/
      //GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)
      ControlPanel.Exit();
    } else {
      Display("The maximum number of saved games has been reached; overwrite or delete some old ones.");
    }
  }

}


static void CustomSave::OnSelectionChange(GUIControl *control) {
  //put the selection in the save txt box
  txtSaveName.Text = lstSaveGames.Items[lstSaveGames.SelectedIndex];
}




///////////////////////////////////
//
//        CONTROL PANEL
//
///////////////////////////////////


// static void ControlPanel::Enter()//defined earlier in the file because of dependencies
// {
//    ...
// }


// static void ControlPanel::Exit() //same as above
// {
//    ...
// }

static void ControlPanel::Save_OnClick() {
  mouse.UseDefaultGraphic();
  Wait(1);
  gControlmenu.Visible = false;
  CustomSave.Show();  
}

static void ControlPanel::Load_OnClick() {
  mouse.UseDefaultGraphic();
  Wait(1);
  gControlmenu.Visible = false;
  PauseGame();
  CustomLoad.Show();
}

static void ControlPanel::Resume_OnClick() {
  //mouse.UseDefaultGraphic();
  //gControlmenu.Visible = false;
  /*
  UnPauseGame();
  gInventory.Clickable = true;
  gIconbar.Clickable = true;
  */
  //GUIlogic.PlayerUI_EnableAndShow(); //shows the player's controls (inventory, etc.)
  ControlPanel.Exit();
}  

static void ControlPanel::Exit_OnClick() {
  quitTag.Clickable = false;
  quitTag.Enabled = false;
  gQuitMenu.Visible = true;
  gQuitMenu.Centre();
}  

static void ControlPanel::Menu_OnClick() {
  menuQuitTag.Clickable = false;
  menuQuitTag.Enabled = false;
  gMenuMenu.Visible = true;
  gMenuMenu.Centre();
}  