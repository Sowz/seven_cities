//LEGAL DETAILS AND LICENSE: See header file

/*********** CUSTOM FUNCTIONS ******************************/
function surface_delayRelease(this DrawingSurface*)
{
  WAIT_40
  this.Release();
 
}



/*********** END OF CUSTOM FUNCTIONS ******************************/

// Called when the game starts, before the first room is loaded
function game_start() {
  /*
  ///////////
  // test string length
  ///////////
  String s = "";
  int count = 0;
  int count2=0;
  while (true) {
      s=s.Append("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
      count++;
      count2++;
      if (count2>3000) {
        if (count>=1000) {
           Display(String.Format("%d", count2));
           count=0;
        }
      }
  }
  */
 
  ///////////
  // ~test string length
  ///////////
  
  
  #ifdef BETATEST
    SafeFile.HealthCheck("tracker.txt");
    DebugGui.ShowDebugButton();
    AGSConsole.EnableShortcut(true);
    DebugGui.CheckTestersName();
  #endif
  
    
  GUIlogic.InitializeGUI();
  //InitTextArea();
  
  #ifdef SOCKETS
  AGSConsole.EnableSockets();
  #endif
  AGSConsole.SetState(eConsoleOn); //module 'AGS console'
  
  mouse.Visible = false;
}
// Please note: mouse starts out NOT VISIBLE.  It is made visible when menu is entered.  (see Menu Room)




// Main Game Cycle
function repeatedly_execute() {
  if (!IsGamePaused() && game.room_height)
  {
    ActionsLogic.DetectAvailableRightClick(); //do that once per loop
    
    //highlight the corresponding button on the GUI
    GUIlogic.HighlightActionButton(ActionsLogic.GetAvailableRightClick());
    
    // status bar line text
    GUIlogic.UpdateStatusBar(); //displays such text as "Look at + object under mouse"
      
    WalkFast.ManageTimer();
  }

}

function repeatedly_execute_always() {
  
  CustomLoad.ManageTimer();
  
  if (!GUIlogic.IsInSpecialRoom()) { //we don't allow pause in the splashscreen or the main menu screen
    GUIlogic.HandleSpaceBar(); //our pause system conflicts a bit with dialog skipping. We need a special function
  }
  
}

function show_inventory_window () {
  // ** CUSTOM INVENTORY WINDOW
  gInventory.Visible = true;
  mouse.Mode = eModeInteract;

}

bool showConsole = false; // 'AGS console' module
function on_key_press(int keycode) {
  
  if (!GUIlogic.IsDebugPaused())
  {
    
      //Display("keypress"); //DEBUG
      
      // called when a key is pressed. keycode holds the key's ASCII code
            
      /*
      if (IsGamePaused() == 1) { //The game is currently paused.
        if (keycode == eKeySpace) { //the player pressed space => we exit pause
          GUIlogic.ExitPause();
          return;
        } else { //the player pressed another key; we ignore it by dumping the keystroke, and remain in pause.
          keycode=0; // (code 0 isn't used by AGS, it doesn't correspond to any key)
          return;
        }
      }

      //the "return" in the code section above guarantees that we don't deal twice with eKeySpace
      if (keycode == eKeySpace) { //the player pressed space => we exit pause
        GUIlogic.EnterPause();
      } 
        */
        
        
      //[Mathieu] I commented the code section below: why would we ant those shortcuts to pause the game???
      /*
      if ((   keycode==eKeyCtrlQ ) 
          || (keycode==317)//ALT-Q
          || (keycode==eKeyCtrlC ))
      {  
        if (IsGamePaused()==0) {
          GUIlogic.EnterPause();
        } else {
          
          
          
        }
      }
      */
      
      /* AGS console module 
      if (keycode == eKeyCtrlC && !gCheckpoints.Visible) //Ctrl+C displays the debug console
      {
         if (!showConsole) {
           AGSConsole.ShowHide();
           showConsole = true;
         }    
         else
          showConsole = false;
      }
       end of AGS console module */
      
      

      
      //[Mathieu] I commented the code section below: a simple shortcut without even a confirmation
      // is too dangerous for the player!!! Who ever uses the "restart" shortcut anyway? ;)
      /*
      if (keycode==eKeyF9) {
        RestartGame();  // F9
      }
      */
      
      
      if (keycode==eKeyF12) {
        SaveScreenShot("scrnshot.bmp");  // F12
      }
      // comment out debug shortcuts
      /*
      if (keycode==19) {
        Debug(0,0);  // Ctrl-S, give all inventory
      }
      
      if (keycode==22) {
        Debug(1,0);  // Ctrl-V, version
      }
      
      if (keycode==1) {
        Debug(2,0);  // Ctrl-A, show walkable areas
      }
      if (keycode==24) {
        Debug(3,0);  // Ctrl-X, teleport to room
      }
      */
      if (keycode==22) {
        Debug(1,0);  // Ctrl-V, version
      }
      // Enable or Disable double-click running
      if (keycode == eKeyR) {
        WalkFast.SwitchWalkfastFeature(); //turns it on or off
      }
  }
}



function on_mouse_click(MouseButton button) {
   
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  // normal commands
  else if (button == eMouseLeft) {
    WalkFast.OnMouseClick_left(); //manage walk fast feature
    
    if (mouse.Mode == eModeUseinv) {
        SetUseItem(player.ActiveInventory.ID);
    }
    
    ProcessClick(mouse.x, mouse.y, mouse.Mode ); // process interaction
    ActionsLogic.ResetCursor(); //go back to "walk to" with no inventory item selected
  }
  
  // Obvious Verb
  else if (button == eMouseRight){
  
    player.StopWalkFast(); //return to normal walking speed

    CursorMode rightClickMode = ActionsLogic.GetAvailableRightClick();
    ProcessClick(mouse.x, mouse.y, rightClickMode );
    ActionsLogic.ResetCursor();  //go back to "walk to" with no inventory item selected


  // run
  }
  else if (button == eMouseMiddle) { 
    player.StartWalkFast();
    ProcessClick(mouse.x, mouse.y, mouse.Mode );// process interaction
    ActionsLogic.ResetCursor();  //go back to "walk to" with no inventory item selected
  }
  
  //Handles eMouseInvLeft and eMouseInvRight
  //Note: "Override built-in inventory window click" must be enabled in the General Settings
  CustomInventory.OnMouseClick(button);
  
}

//when player clicks on the "up" button of the inventory
function btnInvUp_Click(GUIControl *control, MouseButton button) {
  CustomInventory.ScrollUp();
  Display(String.Format("RC:%d",invCustomInv.RowCount));//DEBUG
}

//when player clicks on the "down" button of the inventory
function btnInvDown_Click(GUIControl *control, MouseButton button) {
  CustomInventory.ScrollDown();
}

//START OF CONTROL PANEL FUNCTIONS
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Save_OnClick();
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Load_OnClick();
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Resume_OnClick();
  AGSConsole.HiddenActivation(0); //we reset the cheat code sequence
}

function btnExit_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Exit_OnClick();
}

function btnMenu_OnClick(GUIControl *control, MouseButton button)
{
  ControlPanel.Menu_OnClick();
}

//END OF CONTROL PANEL FUNCTIONS

// LOAD/SAVE DIALOGS

// Save Dialog

// Done Button
function done_OnClick(GUIControl *control, MouseButton button)
{
  CustomSave.Done_OnClick();
}

// Save Button
function save_OnClick(GUIControl *control, MouseButton button)
{
  CustomSave.Save_OnClick();
}

// List Box of Saves
function lstSaveGames_OnSelectionChange(GUIControl *control)
{
  CustomSave.OnSelectionChange(control);
}

// Load Dialog

// Done Button
function loadDone_OnClick(GUIControl *control, MouseButton button)
{
  CustomLoad.Done_OnClick();
}

// Load
function load_OnClick(GUIControl *control, MouseButton button)
{
  CustomLoad.Load_OnClick();
}

// List Box of Loads
function lstLoadGames_OnSelectionChange(GUIControl *control)
{
  CustomLoad.OnSelectionChange(control);
  
}



// END OF ADDITIONAL DIALOGS

// Main Menu
function newGame_OnClick(GUIControl *control, MouseButton button)
{
  TitleMenu.NewGame_OnClick();
}

function loadGame_OnClick(GUIControl *control, MouseButton button)
{
  TitleMenu.Load_OnClick();
}

function quitGame_OnClick(GUIControl *control, MouseButton button)
{
  TitleMenu.Quit_OnClick();
}

// Quit Menu
function yesBtn_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function noBtn_OnClick(GUIControl *control, MouseButton button)
{
  gQuitMenu.Visible = false;
}

// Menu Menu (that's the confirmation dialog asking you if you want to 
// go back to the main menu)

function yesMenu_OnClick(GUIControl *control, MouseButton button)
{
  // go to menu by restarting (required for game to run properly again)
  RestartGame();
  
  GUIlogic.TitleMenu_Show();
}

function noMenu_OnClick(GUIControl *control, MouseButton button)
{
  gTitleMenu.Visible = false;
}


//////////////////////////////////////////////////////////////////////////



// Mulbray

function cMulbray_AnyClick()
{
  //CharactersLogic.Mulbray(game.used_mode);
}




//////////////////////////////////////////////////////////////////////////




// Irene

function cIrene_AnyClick()
{
  
  CharactersLogic.Irene(game.used_mode);
}


//////////////////////////////////////////////////////////////////////////



// Biff

function cBiff_AnyClick()
{
  //CharactersLogic.Biff(game.used_mode);
}

// Bruno

function cBruno_AnyClick()
{
  //CharactersLogic.Bruno(game.used_mode);
}


// items

// Oil Can



function iOilCan_OtherClick()
{

  ItemsLogic.OilCan();
}

/*
// Use
function iOilCan_Interact()
{
  //cIndy.Say("No, I don't want to get my hands covered in oil.");
  ItemsLogic.OilCan(eModeInteract);
}

// Look
function iOilCan_Look()
{
  //cIndy.Say("It's an oil can I took from the janitor's closet.");
  ItemsLogic.OilCan(eModeLookat);
}


// Talk
function iOilCan_Talk()
{
  //cIndy.Say("I don't think that will work.");
  ItemsLogic.OilCan(eModeTalkto);
}

// Use Inventory
function iOilCan_UseInv()
{
  ItemsLogic.OilCan(eModeUseinv);
}
*/


// Office Key



function iKey_OtherClick()
{

  ItemsLogic.OfficeKey();
}

/*
// Use
function iKey_Interact()
{
  //cIndy.Say("That won't work.");
  ItemsLogic.OfficeKey(eModeInteract);
}

// Look
function iKey_Look()
{
  //cIndy.Say("It's the key to my office cabinet.");
  ItemsLogic.OfficeKey(eModeLookat);
}

// Talk
function iKey_Talk()
{
  //cIndy.Say("That won't do anything.");
  ItemsLogic.OfficeKey(eModeTalkto);
}

// Use Inventory
function iKey_UseInv()
{
  ItemsLogic.OfficeKey(eModeUseinv);
  
}
*/


// Telegram


function iTelegram_OtherClick()
{
  ItemsLogic.Telegram();  
}
/*
// Use
function iTelegram_Interact()
{

  ItemsLogic.Telegram(eModeInteract);
}

// Look
function iTelegram_Look()
{
  ItemsLogic.Telegram(eModeLookat);  
}



// Talk
function iTelegram_Talk()
{
//  cIndy.Say("I don't think that will work.");
  ItemsLogic.Telegram(eModeTalkto);  
  
}

// Use Inventory
function iTelegram_UseInv()
{
    ItemsLogic.Telegram(eModeUseinv);  
}
*/

// Tire Repair

// Use
function iTireRepair_Interact()
{
  cIndy.Say("I have no need to fix a tire...");
}

// Look
function iTireRepair_Look()
{
  cIndy.Say("It's a tire repair kit.");
}

function iTireRepair_OtherClick()
{
  // Close
  if (Mouse.Mode == eModeClose) {
    cIndy.Say("That won't work.");
  }
  // Open
  if (Mouse.Mode == eModeOpen) {
    cIndy.Say("I can't open that!");
  }
  // Pull
  if (Mouse.Mode == eModePull) {
    cIndy.Say("I can't pull that!");
  }
  // Push
  if (Mouse.Mode == eModePush) {
    cIndy.Say("That won't work.");
  }
}

// Talk
function iTireRepair_Talk()
{
  cIndy.Say("I doubt that would do anything.");
}

// Use Inventory
function iTireRepair_UseInv()
{
  cIndy.Say("That won't work.");
}

// Wallet



function iWallet_OtherClick()
{
  /*
  // Close
  if (Mouse.Mode == eModeClose) {
    cIndy.Say("That won't work.");
  }
  // Open
  if (Mouse.Mode == eModeOpen) {
    cIndy.Say("I can't open that!");
  }
  // Pull
  if (Mouse.Mode == eModePull) {
    cIndy.Say("I can't pull that!");
  }
  // Push
  if (Mouse.Mode == eModePush) {
    cIndy.Say("That won't work.");
  }*/
  ItemsLogic.Wallet();
}
/*
// Use
function iWallet_Interact()
{
  cIndy.Say("I can't do that.");
}

// Look
function iWallet_Look()
{
  cIndy.Say("It's my wallet.");
}

// Talk
function iWallet_Talk()
{
  cIndy.Say("That won't accomplish anything.");
}

// Use Inventory
function iWallet_UseInv()
{
  cIndy.Say("That can't work.");
}
*/


function iCompass_OtherClick()
{
  ItemsLogic.Compass();
}


function iCompassNote_OtherClick()
{
  ItemsLogic.CompassNote();
}


function dialog_request(int param) {
}


function buttonCheckpoint_OnClick(GUIControl *control, MouseButton button)
{
  CheckpointsGui.OnButtonClick();
  //PlayerUI.EnableAndShow();
  
}



function cStudent02_AnyClick()
{
  
  //CharactersLogic.Student2(game.used_mode);
}

function Button1_OnClick(GUIControl *control, MouseButton button)
{
  CheckpointsGui.OnNoMusicClick();
}

function cStudent07_AnyClick()
{
  //CharactersLogic.Student7(game.used_mode);
}

function cStudent06_AnyClick()
{
  //CharactersLogic.Student6(game.used_mode);
}

function cStudent05_AnyClick()
{
  //CharactersLogic.Student5(game.used_mode);
}

function cStudent01_AnyClick()
{
  //CharactersLogic.Student1(game.used_mode);
}




function iBarnett_Hammer1_OtherClick()
{
  ItemsLogic.Hammer1();
}

function iBarnett_Hammer2_OtherClick()
{
  ItemsLogic.Hammer2();
}

function DebugButton1_OnClick(GUIControl *control, MouseButton button)
{
  Display("Stop_Ambient_All()");
  Stop_Ambient_All(); //DEBUG
}

function DebugButton2_OnClick(GUIControl *control, MouseButton button)
{
  Display("aSound3.Stop_Ambient()");  
  //aSound3.Stop_Ambient();//DEBUG
} 
function DebugButton3_OnClick(GUIControl *control, MouseButton button)
{
  Display("aSound3.Play_Ambient();");  
  //aSound3.Play_Ambient();//DEBUG
}

function bScrollCheckpointsUp_OnClick(GUIControl *control, MouseButton button)
{
  ListBoxCheckpoints.ScrollUp();
  
}

function bScrollCheckpointsDown_OnClick(GUIControl *control, MouseButton button)
{
  ListBoxCheckpoints.ScrollDown();
}


function bScrollCheckpointsEnd_OnClick(GUIControl *control, MouseButton button)
{
  ListBoxCheckpoints.SelectedIndex = ListBoxCheckpoints.ItemCount - 1;
}

function cStudentPink_AnyClick()
{
  //CharactersLogic.StudentPink(game.used_mode);
}

function cStudentBiff_AnyClick()
{
  //CharactersLogic.StudentBiff(game.used_mode);
}

function cStudentFat_AnyClick()
{
  //CharactersLogic.StudentFat(game.used_mode);
}

function cStudentTie_AnyClick()
{
  //CharactersLogic.StudentTie(game.used_mode);
}

function cStudentRedhead_AnyClick()
{
  //CharactersLogic.StudentRedhead(game.used_mode);
}

function bDisclaimerExit_OnClick(GUIControl *control, MouseButton button)
{
  Display("There's no shame in being a Disney attorney! Bye bye!");
  QuitGame(0);
}

function bDisclaimerTickbox_OnClick(GUIControl *control, MouseButton button)
{
  Disclaimer.Tickbox_OnClick();
}

function bDisclaimerProceed_OnClick(GUIControl *control, MouseButton button)
{
  Disclaimer.Proceed_OnClick();
}

/* AGS console module */
function txtConsole_OnActivate(GUIControl *control){
  String command = txtConsole.Text;
  txtConsole.Text = ""; //we empty the prompt
  AGSConsole.LogInput(command);
}

function bConsoleVariables_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.Variables_OnClick();
}

function bConsoleHelp_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.Help_OnClick();
}

function bConsoleScript_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.Scripts_OnClick();
}

function bConsoleBetaTest_OnClick(GUIControl *control, MouseButton button)
{
 
  if (DebugGui.IsReduced()) {
    AGSConsole.ShowHide();
    DebugGui.ShowHide();
  }
}

function bConsoleUp_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.ScrollUp();
}

function bConsoleDown_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.ScrollDown();
}




/* end of AGS console module */

/* UltraVariables */
function buttonDeNGClose_OnClick(GUIControl *control, MouseButton button)
{
  //Display("click");
  Dbg.ShowHideVariables();
}

function buttonDengTimerTab_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.SwitchToTab(eUltraVariablesTabAGSTimers);
}

function buttonDengNamedTab_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.SwitchToTab(eUltraVariablesTabNamed);
}

function buttonDengGlobalTab_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.SwitchToTab(eUltraVariablesTabGlobals);
}


/*
function bVariableDown_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.ScrollDown();
}

function bVariableUp_OnClick(GUIControl *control, MouseButton button)
{
  Dbg.ScrollUp();
}
*/


/* end of UltraVariables */


function gBetaTesting_OnClic(GUI *theGui, MouseButton button)
{

}


//the two buttons below control if the player has clicked on the
//first of the two hidden spots where he should click
//to display the console in the Release version of the game.
//See also  : bHiddenButton1_OnClick(..), bHiddenButton2_OnClick(...)

function bHiddenButton1_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.HiddenActivation(1);
}

function bHiddenButton2_OnClick(GUIControl *control, MouseButton button)
{
  AGSConsole.HiddenActivation(2);
}
