#define MAX_CHECKPOINTS 100

struct CheckpointData {
  String name;
};

int curCheckpoint = 1;  //we keep track of the id of the last registered checkpoint,
                        //because they can only be created in increasing order.
                        //note: our checkpoints start from 1 because enums (such as CheckPointsEnum) also start from 1.

//bool _skipCutsceneIfAny = false;

/*
static bool CheckPoints::ShouldSkipCutscene_Consume() {
  bool result = _skipCutsceneIfAny;
  _skipCutsceneIfAny = false;
  return result;
}
*/


CheckpointData checkpointsData[MAX_CHECKPOINTS];

bool checkpointInitialized = true; //is false after a "jump to" until all variables have been set in the destination room
int requestedCheckpoint = 1;


static void CheckPoints::RegisterNew(int id ,  String name) 
 {
   
   //safety: do we follow the process and register the checkpoints in increasing order?
   if (id != curCheckpoint) {
     AbortGame(String.Format("Programing mistake: you didn't register the checkpoints in the logical order: 0,1,2,... Or maybe you entered this room twice. (Expected %d, found %d)", curCheckpoint, id));
   }   

   //safety: does it already exist?
   if (checkpointsData[id].name != null) {
     AbortGame("Programing mistake: you declared two checkpoints with the same ID");
   }
   
   checkpointsData[id].name = name;
   ListBoxCheckpoints.AddItem(String.Format("(%d) : %s", id,  name));
   curCheckpoint++;
 }
 
static void CheckPoints::RegisterAll() 
 {
   CheckPoints.RegisterNew(eChckpnt_01_Disclaimer,                            "DISABLED") ;
   CheckPoints.RegisterNew(eChckpnt_02_MainMenu,                        "DISABLED") ;
   CheckPoints.RegisterNew(eChckpnt_03_IndysClassroom_chalkboardCutscene,"DISABLED") ;
   CheckPoints.RegisterNew(eChckpnt_04_IndysClassroom_studentsPuzzle,   "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_05_IndysClassroom_studentsPuzzle2,  "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_06_BarnettCorridor,                 "DISABLED") ;  
   CheckPoints.RegisterNew(eChckpnt_07_BarnettReadTelegram,             "BARNETT: Barnett Telegram") ;   
   CheckPoints.RegisterNew(eChckpnt_08_TibetTop,                        "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_09_MirrorsTests,                    "DEBUG: Mirrors tests") ;   
   CheckPoints.RegisterNew(eChckpnt_10_NewClassRoom,                    "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_11_NewChalkboard,                   "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_12_FontsTests,                      "DEBUG: Fonts tests") ;   
   CheckPoints.RegisterNew(eChckpnt_13_SpainDigSite,                    "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_14_SpainTruckCutscene,              "DISABLED") ;   
   CheckPoints.RegisterNew(eChckpnt_15_TextArea,                        "DEBUG: text area tests") ;   
   CheckPoints.RegisterNew(eChckpnt_16_FoAcredits,                        "DEBUG: Fate of Atlantis Credits") ;   
   CheckPoints.RegisterNew(eChckpnt_17_RegularCredits,                    "DISABLED") ;   


}
 
/*
static void CheckPoints::MainMenu() {
    player.ChangeRoom(1, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram_Cutscene() {
    cIndy.Say("Let's take a look at that telegram.");
    prevX = player.x;
    prevY = player.y;
    gIconbar.Visible = false;
    gInventory.Visible = false;
    gStatusline.Visible = false;
    player.ChangeRoom(7, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram() {
  
  //give needed objects
  player.AddInventory(iOilCan);
  player.AddInventory(iTelegram);
  
  //arbitrarily go to Indy's office
  player.ChangeRoom(6,  160,  140);
  WAIT_10
  
}

static void CheckPoints::Barnett_NewGame() {
  StopMusic();
  if (!CheckPoints.ShouldSkipCutscene_Consume()) {
    player.ChangeRoom(18, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else {  
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  }
    
}

static void CheckPoints::Barnett_Corridor() {
  StopMusic();
  
  //give proper objects
  //oil can
  //oilCan.Visible = false;
  cIndy.AddInventory(iOilCan);    
  
  player.ChangeRoom(3, 500, 120);
}


static void CheckPoints::Spain_Test() {
  StopMusic();

  player.ChangeRoom(13, 1100, 130); 
  
    
}
*/

/*
  #ifdef TESTING
    gIconbar.Visible = true;
    gInventory.Visible = true;
    gStatusline.Visible = true;
    Mouse.Mode = eModeWalkto;
    SetMusicMasterVolume(0); //no sound
    
    //  cIndy.ChangeRoom(3,  500,  125);
    player.AddInventory(iOilCan);
    player.ChangeRoom(8,  160,  120);
  #endif
  */
  

static void CheckPoints::JumpDone() {
  checkpointInitialized = true;
}

static bool CheckPoints::IsJumping() {
  return !checkpointInitialized;
}

static int CheckPoints::RequestedCheckpoint() {
  return requestedCheckpoint;
}

  
 
static void CheckPoints::JumpTo(int checkpointIndex) {
  #ifdef TESTING
  Display(String.Format("Jumping to checkpoint #%d", checkpointIndex));
  #endif
  
  //_skipCutsceneIfAny = false; //we always reset that
  requestedCheckpoint = checkpointIndex;
  checkpointInitialized = false;

  
  if (checkpointIndex == eChckpnt_01_Disclaimer) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.MainMenu();
    player.ChangeRoom(20, 1, 1); //go to the disclaimer screen
  } else if (checkpointIndex ==eChckpnt_02_MainMenu) {
    //_skipCutsceneIfAny = true;
    //CheckPoints.MainMenu();
    player.ChangeRoom(1, 1, 1);
  } else if (checkpointIndex ==eChckpnt_03_IndysClassroom_chalkboardCutscene) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(18, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else if (checkpointIndex ==eChckpnt_04_IndysClassroom_studentsPuzzle) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpointIndex ==eChckpnt_05_IndysClassroom_studentsPuzzle2) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Spain_Test();
    //player.ChangeRoom(13, 1100, 130); //Spain
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpointIndex ==eChckpnt_06_BarnettCorridor) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Corridor();
    player.ChangeRoom(3, 500, 120);
  } else if (checkpointIndex ==eChckpnt_07_BarnettReadTelegram) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Read_Telegram();
    player.ChangeRoom(6,  160,  140); //go to Indy's office
  } else if (checkpointIndex ==eChckpnt_08_TibetTop) {
    player.ChangeRoom(14,  217,  129); //go to Tibet mountain top
  } else if (checkpointIndex ==eChckpnt_09_MirrorsTests) {
    player.ChangeRoom(15,  65,  141); //go to Mirrors tests room
  } else if (checkpointIndex ==eChckpnt_10_NewClassRoom) {
    player.ChangeRoom(16,  160,  100); //go to new version of Indy's calssroom  
  } else if (checkpointIndex ==eChckpnt_11_NewChalkboard) {
    player.ChangeRoom(18,  160,  100); //go to new version of chalkboard 
  } else if (checkpointIndex ==eChckpnt_12_FontsTests) {
    player.ChangeRoom(19,  270,  150); //go to fonts tests screen (debug)
  } else if (checkpointIndex ==eChckpnt_13_SpainDigSite) {
    player.ChangeRoom(13,  1200,  120); //go to spanish digsite
  } else if (checkpointIndex ==eChckpnt_14_SpainTruckCutscene) {
    player.ChangeRoom(13,  1200,  120); //go to spanish digsite and play the truck cutscene
  } else if (checkpointIndex ==eChckpnt_15_TextArea) {
    player.ChangeRoom(21,  1200,  120); 
  } else if (checkpointIndex ==eChckpnt_16_FoAcredits) {
    player.ChangeRoom(22,  160,  0); 
  } else if (checkpointIndex ==eChckpnt_17_RegularCredits) {
    player.ChangeRoom(10,  160,  0); 

  } else {
    AbortGame(String.Format("Programing mistake: There is no checkpoint '%d'.",checkpointIndex));
  }
  
}

    