#define MAXNODES 200
#define MAXCHILDREN 5

//#define NONE -1

struct XMLNode
{
  int ID;
  String name;
  int nbChildren;
  XMLNODE parent;
  XMLNODE children[MAXCHILDREN];
  XMLNODE brother; //since 'children' cannot be a dyn array, we might be annoyed. We use a sibling node to extend the current node if more children are needed
  String txt;
  XMLFormattingStyle style;
};


XMLNode nodes[MAXNODES];


int findFreeNode()
{
    int i=0;
    while (i<MAXNODES)
    {
      if (nodes[i].ID == NONE)
        return i;
      i++;
    }
    AbortGame("ShitXML::findFreeNode - you need to increase 'MAXNODES'");
}

void ResetNode(XMLNODE node)
{
  nodes[node].txt="";
  nodes[node].name="";
  nodes[node].nbChildren = 0;
  int i=0;
  while (i<MAXCHILDREN) {
     nodes[node].children[i] = NONE;
     i++;
  }
  nodes[node].brother=NONE; 
  nodes[node].parent=NONE; 
  nodes[node].ID=NONE;
  
}

static void ShitXML::SetFormattingStyle(XMLNODE node,  XMLFormattingStyle style)
{
  if (node>=0)
  {
    nodes[node].style = style;
  }
}


static XMLNODE ShitXML::NewNode(String name)
{
  if (name==null) {
    Display("ShitXML::NewNode : requires a name");
    return;
  }
  
  XMLNODE ID = findFreeNode();
  ResetNode(ID);
  nodes[ID].ID=ID;
  nodes[ID].name=name;
  
  nodes[ID].style=eXMLStyle_OneLine; //by default
  return ID;
}

static void ShitXML::SetText(XMLNODE node,  String txt)
{
  if (txt==null) {
    Display("ShitXML::SetText : txt cannot be null");
    txt="";
  }
  
  if (nodes[node].ID != NONE)
    nodes[node].txt = txt;
  else
    Display(String.Format("ShitXML::SetText : bad node '%d'", node));
}


static void ShitXML::SetText_i(XMLNODE node,  int value)
{
  if (nodes[node].ID != NONE)
    nodes[node].txt = String.Format("%d",value);
  else
    Display(String.Format("ShitXML::SetText : bad node '%d'", node));
}

static String ShitXML::GetText(XMLNODE node)
{
  
  if (nodes[node].ID != NONE)
    return nodes[node].txt;
  else {
    Display(String.Format("ShitXML::GetText : bad node '%d'", node));
    return "";
  }
}


static int ShitXML::GetText_i(XMLNODE node)
{
  
  if (node != NONE)
    return nodes[node].txt.AsInt;
  else {
    Display(String.Format("ShitXML::GetText_i : bad node '%d'", node));
    return -1;
  }
}


static String ShitXML::GetName(XMLNODE node)
{
  
  if (node != NONE)
    return nodes[node].name;
  else {
    Display(String.Format("ShitXML::GetName : bad node '%d'", node));
    return "";
  }
}


XMLNODE AddBrother(XMLNODE node)
{
  XMLNODE ID = findFreeNode();
  ResetNode(ID);
  nodes[ID].ID=ID;
  nodes[ID].name="BROTHER"; //Arbitrary name for all brothers
  nodes[ID].style=eXMLStyle_OneLine; //by default
  
  nodes[node].brother = ID;
  nodes[ID].parent = node;
  return ID;
}

static void ShitXML::AddChild(XMLNODE parent, XMLNODE child)
{
  if (nodes[parent].style==eXMLStyle_OneLine) {
    Display(String.Format("ShitXML::AddChild : error. You tried to add children to node '%d' ('%s') but it has style OneLine",parent,  nodes[parent].name));
    return;
  }
  
  //Display(String.Format("Addchild: '%s', '%s'", nodes[parent].name,  nodes[child].name)); //DEBUG
  
  //explore the parent and potentially its brothers to find a slot for the child
  XMLNODE bro=parent;
  while (nodes[bro].nbChildren>=MAXCHILDREN)
  {
    if(nodes[bro].brother==NONE)
      AddBrother(bro); //We add a brother

    bro = nodes[bro].brother; //we continue on to the brother
  }
  nodes[bro].children[nodes[bro].nbChildren] = child;
  nodes[child].parent=bro;
  nodes[bro].nbChildren++;
   
}

static void ShitXML::DeleteAll(XMLNODE root)
{
  //we recursvely delete all the brothers
  if (nodes[root].brother != NONE)
    ShitXML.DeleteAll(nodes[root].brother);
  
  //We recursively delete all the children.
  int i=0;
  while (i<nodes[root].nbChildren) {
    ShitXML.DeleteAll(nodes[root].children[i]);
    i++;
  }
  
  ResetNode(root);
}

void InitNodes()
{
  int i=0;
  while (i<MAXNODES)
  {
    ResetNode(i);
    i++;
  }
  
}

String MakeTab(int indent)
{
    String tab = "";
    int i=0;
    while (i<4*indent)
    {
       tab=tab.Append(" ");
       i++;
    }
    return tab;
}

String Indented(int indent,  String s)
{
  if (s==null) s="";
  
  String t = MakeTab(indent);
  return t.Append(s);
}

String OpenTag(String name)
{
   return String.Format("<%s>", name);
}

String CloseTag(String name)
{
   return String.Format("</%s>", name);
}


static XMLNODE ShitXML::FirstChild(XMLNODE parent) {
  return nodes[parent].children[0];
}


static XMLNODE ShitXML::NextChild(XMLNODE currentChild)
{
  XMLNODE parent = nodes[currentChild].parent;
  
  //we iterate to find againt the index of the child from which we started
  int i=0;
  XMLNODE child=nodes[parent].children[0];

  while (child!=currentChild) {
    i++;
    child = nodes[parent].children[i];
  }
  
  //now we look at the next child
  i++;
  if (i<nodes[parent].nbChildren) {
    return nodes[parent].children[i];
  } else {
    if (i>=MAXCHILDREN) { //ok, we're beyond the nb of children, but isn't it because there's a brother?
      parent = nodes[parent].brother;
      if (nodes[parent].nbChildren==0) //the brother has no children
        return NONE;
      else
        return nodes[parent].children[0]; //first child of the brother
    } else { //we didn't find any next child. There is none. we're at the end of the search.
      return NONE;
    }    
  }

}


void WriteNode(int indent,  XMLNODE node)
{
  if (node != NONE) //we gave a tree leaf to the function. Tsk, tsk.
  {
    if (nodes[node].ID != NONE) //we gave a badly-initialized node to the function
    {
      if (nodes[node].style==eXMLStyle_Block) { //something like <a>
                                                //                  666
                                                //               </a>
        
        //open tag
        //f.WriteRawLine(Indented(indent, OpenTag(nodes[node].name)));
        SafeFile.AppendLine(Indented(indent, OpenTag(nodes[node].name)));
        
        //Children
        XMLNODE bro = node;
        while (bro!=NONE) {
          int i=0; 
          while (i<nodes[bro].nbChildren) {
            WriteNode(  indent+1,  nodes[bro].children[i]);
            i++;
          }
          bro = nodes[bro].brother;
        }
        
        //text
        //f.WriteRawLine(Indented(indent+1, nodes[node].txt));
        SafeFile.AppendLine(Indented(indent+1, nodes[node].txt));
        
        //close tag
        //f.WriteRawLine(Indented(indent, CloseTag(nodes[node].name)));
        SafeFile.AppendLine(Indented(indent, CloseTag(nodes[node].name)));
      }
      else if (nodes[node].style==eXMLStyle_OneLine) { // something like <a>666</a>
        String line="";
        line=line.Append(OpenTag(nodes[node].name));
        line=line.Append(nodes[node].txt);
        line=line.Append(CloseTag(nodes[node].name));
        //f.WriteRawLine(Indented(indent, line));
        SafeFile.AppendLine(Indented(indent, line));
        
      }
      else {
        Display(String.Format("XML::WriteNode : unknown style for '%s': '%d'",nodes[node].name, nodes[node].style));
      }
    }
  }
}

static bool ShitXML::Dump(XMLNODE root,  String fileName)
{
  if (root<0 || nodes[root].ID == NONE) {
    Display(String.Format("Error: ShitXML::Dump : empty XML node %d", root));
    return false;    
  }
  
  
  if (SafeFile.Open(fileName)) {
    WriteNode(0, root);
    SafeFile.Close();
    return true;
  } else
      Display(String.Format("Error: ShitXML::Dump : Could not open '%s' for writing", fileName));

  return false;
  
}

  
/////////////////////////////////////
//
//        XML PARSING
//
////////////////////////////////////
  
String xmlBuffer;
int bufferStart=0; //global position of the first character of xmlBuffer;
int start=0; //global position of the character being read

File* fXML;


    /*
char buf_CharAt(int at)
{
  while (at-bufferStart) >= xmlBuffer.Length){
    if (!fXML.EOF) {
      xmlBuffer = xmlBuffer.Append(fXML.ReadRawLineBack());
    } else {
        Display(String.Format("buf_CharAt : requested %d, buffer length is %d", at-bufferStart,  xmlBuffer.Length));
        return eKeySpace;
    }
  }
  
  return xmlBuffer.Chars[at-bufferStart];
}

*/

bool ReachedEOF() {
    return fXML.EOF;
}

//reads from the file as many characters as needed to be able to read buffer at position 'start+howMany'
void LoadAhead(int howMany)
{
  while (start+howMany-bufferStart >= xmlBuffer.Length){
    if (!fXML.EOF) {
      xmlBuffer = xmlBuffer.Append(fXML.ReadRawLineBack());
    } else {
        //Display(String.Format("buf_CharAt : requested %d, buffer length is %d", start-bufferStart,  xmlBuffer.Length));
        //start++;
        //return eKeyReturn; //arbitrary value that is not likely to appear in the file
      xmlBuffer = xmlBuffer.Append(String.Format("%c", eKeyReturn)); //arbitrary value that is not likely to appear in the file
    }
  }  
}

//tells what character there is at position 'start+howMany', but does not change 'start'
char LookAhead(int howMany) {
  LoadAhead(howMany);
  return xmlBuffer.Chars[start+howMany-bufferStart];
}

//tells what character there is at position 'start' and increases 'start'
char GetNextChar()
{
  char c = LookAhead(0);
  start++;
  return c;
    
}



//call 'consume' every once in a while to reduce the size of xmlBuffer 
//(only if you're sure you won't need to read backwards)
String consume (int howMany)
{
  String ret = xmlBuffer.Before(howMany);
  xmlBuffer = xmlBuffer.After(howMany);
  bufferStart+=howMany;
  return ret;
}

void skipWhiteSpaces() 
{
  char c = LookAhead(0);
  while (c==' ')
  {
    start++;
    c = LookAhead(0);
  }
  //return c;
}

void GoBack(int howManyChars)
{
  start-=howManyChars;
}

//shows a certain amount of characters after 'start'. Use this if a parsing error is detected.
String ShowXMLError() 
{
  return String.Format("'%s'", xmlBuffer.Substring(start-bufferStart,  10)); // the -1 is because 'start' was increased just before, in 'GetNextChar'
}



void ReadSection(XMLNODE parent)
{
  char c;
  
  //bool lastSibling = false;
  
  while (true) {
    
    skipWhiteSpaces(); //skip white spaces, first non-white space goes into 'c'
    c=GetNextChar();
    //Display(String.Format("Read section start '%s'", xmlBuffer.Substring(start-bufferStart, 3))); //DEBUG

    
    if (c!='<') {
      GoBack(1);
      Display(String.Format("005 badly formed xml. Expected '<', found '%c'. Here: %s", c,  ShowXMLError()));
      return;
    }
    String sectionName = "";
    
    c = GetNextChar();
    while (c!= '>')
    {
      sectionName = sectionName.AppendChar(c);
      c = GetNextChar();
    }

    XMLNODE node = ShitXML.NewNode(sectionName); 
    ShitXML.SetFormattingStyle(node, eXMLStyle_Block); //otherwise you can't add children... :(
    
    ShitXML.AddChild(parent,  node);

    //Display(String.Format("Just added child '%s' to parent '%s'",nodes[node].name,  nodes[parent].name)); //DEBUG
    
    String contents="";
    
    
    //we seek a closing tag that would be after an opening tag and some text
    c = GetNextChar();
    while (c!= '<')
    {
      contents = contents.AppendChar(c);
      c = GetNextChar();
    }
    
    //Display(String.Format("Contents of '%s' is '%s'", nodes[node].name, contents)); //DEBUG

    nodes[node].txt = contents;
    
    //now we can find only two things: either a closing tag or an inner opening tag
    GoBack(1);
    //c = GetNextChar();
    c=LookAhead(1); //second character after 'start'
    if (c!='/')
    {
      //we found < followed by something else than /    - It's a new child node start

      //Display(String.Format("Found section start '%c%c'", xmlBuffer.Chars[start-bufferStart-2],  xmlBuffer.Chars[start-bufferStart-1])); //DEBUG

      //GoBack(2); //we go backwards, before <x
      ReadSection(node);
      
      //now we still need to find the closing tag after that (handled by code after)
        
    } //else { // we found </
      //GoBack(2); //we go backwards and let what follows process the closing tag.
    //}
    
    //HERE: Closing tag to the current child section. It was started (a) from a parent section
    //      or (b) immediately after "contents"
    // Typical situation (a):
    //       <a>
    //         <b></b> 
    //         <c></c>
    //  HERE</a>
    // Typical situation (b):
    //       <a>
    //         contents contents contents
    //  HERE</a>      
    String sectionName2="";
    c = GetNextChar();
    //c=LookAhead(1);
      
    if (c!='<') {
      GoBack(1);
      Display(String.Format("004 badly formed xml. Expected '<', found '%c'. Here: %s", c,  ShowXMLError()));
      return;
    }
    c = GetNextChar();
    if (c!='/') {
      GoBack(1);
      Display(String.Format("003 badly formed xml. Expected '/', found '%c'. Here: %s", c,  ShowXMLError()));
      return;
    }
    c = GetNextChar();    
    while (c!= '>')
    {
      //if (c!=' ') 
        sectionName2 = sectionName2.AppendChar(c);
      c = GetNextChar();
    }
    
    
    if (sectionName!=sectionName2)
    {
      Display(String.Format("002 badly formed xml. Opening tag=<%s> but closing tag=</%s>.", sectionName, sectionName2));
      return;
    }

    //Display(String.Format("Finished reading '%s'", sectionName2)); //DEBUG
  
    skipWhiteSpaces();
    
    
    ////////// Now we check what comes AFTER the closing tag //////////////////
 
    if (ReachedEOF()) { //we're after the very last closing tag. Time to quit.
      return;
    }
    c=LookAhead(0); //first character after 'start'
    if (c!='<') {
      //GoBack(1);
      Display(String.Format("001 badly formed xml. Expected '<', found '%c'. Here: %s", c,  ShowXMLError()));
      return;
    } else {
      //HERE: if there is another child section after the child section that just ended
      //typical situation :
      // <a>
      //   <b></HEREb>
      //   <c></c>
      // </a>
      
      //Display(String.Format("Found <",null)); //DEBUG
      
      
      c=LookAhead(1);//second character after 'start'
      if (c!='/') { //it means we have a new section start
        //we do nothing, we'll just iterate
        //Display(String.Format("Found NOT /",null)); //DEBUG
        
        //GoBack(2);
        //ReadSection(parent);
      } else { //two closing tags in a row: we don't want to steal a closing tag from the calling "ReadSection"
        //Display(String.Format("Found /",null)); //DEBUG
        //GoBack(2);
        //lastSibling = true;
        //Display(String.Format("Found </ after section '%s'. Starting again from '%c'",sectionName2,  xmlBuffer.Chars[start-bufferStart])); //DEBUG
        return;
      }

    } 
    
  } // while (!lastSibling) {
    
}


static void ShitXML::Parse(XMLNODE root,  String fileName)
{
 
  xmlBuffer="";
  start=0;
  bufferStart=0;
  
  fXML = File.Open(fileName,eFileRead);
  if (fXML==null) {
    Display(String.Format("ShitXML::Parse : ERROR : could not open '%s' for reading.", fileName));
    return;
  }
  
  ShitXML.SetFormattingStyle(root, eXMLStyle_Block); //otherwise you can't add children... :(
  
  //XMLNODE root = ShitXML.NewNode("root");
  ReadSection(root);

  fXML.Close();
 
}


void game_start()
{
  InitNodes();
}
