// room script file
bool noseBool = false; // Nose message rotate
bool cabinetClose = true; // Cabinet is closed
bool needKey = true; // Still need office key to open cabinet
bool needOil = true; // Still need oil to open cabinet
bool needBang = true; //Still needs a bang (hammer) to open the cabinet
bool shelfBool = false; // Shelf message rotate
bool telegramTaken = false; // Telegram has not been taken from cabinet 
bool doorClose = false; // the door is closed




function room_Load()
{
  //aMusic4.Play();

  Doors.OnEnterRoom(); //this function must be called in EVERY ROOM that contains a door
  
}

// Hotspots

// Telephone
function hTelephone_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(99, 6, eBlock);
    cIndy.Say("That doesn't really work.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(99, 6, eBlock);
    cIndy.Say("That doesn't really work.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(99, 6, eBlock);
    cIndy.Say("No, I don't think that's a good idea.");
  }
}


function hTelephone_Mode9()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("I can't really do that.");
}

function hTelephone_Interact()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("Pointless... Marcus is not at home.");
  cIndy.FaceLocation(99, 150, eBlock);
  cIndy.Say("I hope the mobile phone will be invented soon.");
}

function hTelephone_Look()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("It's my telephone.");
}

function hTelephone_Mode8()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("I don't think that will do anything.");
}

function hTelephone_PickUp()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("II don't want to lug that around.");
}

function hTelephone_Talk()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("That won't help my current situation.");
}

function hTelephone_UseInv()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("I don't need to do that.");
}

// Papers
function hPapers_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(99, 6, eBlock);
    cIndy.Say("It's already a mess, I don't want to make it worse.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(99, 6, eBlock);
    cIndy.Say("It's already a mess, I don't want to make it worse.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(99, 6, eBlock);
    cIndy.Say("It's already a mess, I don't want to make it worse.");
  }
}


function hPapers_Mode9()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("That can't work.");
}

function hPapers_Interact()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("No, I don't want to mark these terrible papers now.");
}

function hPapers_Look()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("My students' work. What a mess.");
}

function hPapers_Mode8()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("That won't work.");
}

function hPapers_PickUp()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("I have no need for them!");
}

function hPapers_Talk()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("No, that's not going to happen.");
}

function hPapers_UseInv()
{
  cIndy.FaceLocation(99, 6, eBlock);
  cIndy.Say("It's already a mess, I don't want to make it worse.");
}

// Window
function hWindow_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(2, 110, eBlock);
    cIndy.Say("There's no point to that.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(2, 110, eBlock);
    cIndy.Say("There's no point to that.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(2, 110, eBlock);
    cIndy.Say("That won't work.");
  }
}


function hWindow_Mode9()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("The window is already shut.");
}

function hWindow_Interact()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("There's no point to that.");
}

function hWindow_Look()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("It looks like a nice day outside.");
}

function hWindow_Mode8()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("I don't need to open the window right now.");
}

function hWindow_PickUp()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("That won't work.");
}

function hWindow_Talk()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("I don't think so.");
}

function hWindow_UseInv()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("That wouldn't do anything useful.");
}

// Desk
function hDesk_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(2, 110, eBlock);
    cIndy.Say("That's a bad idea, last time I did that I threw out my back.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(2, 110, eBlock);
    cIndy.Say("That's a bad idea, last time I did that I threw out my back.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(2, 110, eBlock);
    cIndy.Say("That won't do anything.");
  }
}


function hDesk_Mode9()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("The drawer is already closed.");
}

function hDesk_Interact()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("No, I don't want to move it.");
}

function hDesk_Look()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("It's my desk.");
}

function hDesk_Mode8()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("There's nothing in the drawer, why bother?");
}

function hDesk_PickUp()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("I don't think that will work.");
}

function hDesk_Talk()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("That won't accomplish anything.");
}

function hDesk_UseInv()
{
  cIndy.FaceLocation(2, 110, eBlock);
  cIndy.Say("I don't think that will work.");
}

// Roman Statue
function hRomStat_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(1, 126, eBlock);
    cIndy.Say("I think it's fine where it is.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(1, 126, eBlock);
    cIndy.Say("I think it's fine where it is.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(1, 126, eBlock);
    cIndy.Say("That won't work.");
  }
}


function hRomStat_Mode9()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("I don't think that will work.");
}

function hRomStat_Interact()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("No, I don't want to move it.");
}

function hRomStat_Look()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("It's a rare Ancient Roman statue of an Emperor's two pets: We believe that one of them was called Maximus.");
}

function hRomStat_Mode8()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("I don't think that will work.");
}

function hRomStat_PickUp()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("It's too heavy for me to do that.");
}

function hRomStat_Talk()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("No, that won't solve anything.");
}

function hRomStat_UseInv()
{
  cIndy.FaceLocation(1, 126, eBlock);
  cIndy.Say("There's no point to that.");
}


// Sphinx Nose
function hNose_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(317, 116, eBlock);
    cIndy.Say("Looks pretty heavy, I better not.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(317, 116, eBlock);
    cIndy.Say("Looks pretty heavy, I better not.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(317, 116, eBlock);
    cIndy.Say("I don't think that's possible.");
  }
}


function hNose_Mode9()
{
  cIndy.FaceLocation(317, 116, eBlock);
  cIndy.Say("I doubt that will do anything.");
}

function hNose_Interact()
{
  cIndy.FaceLocation(317, 116, eBlock);
  cIndy.Say("No, I don't want to move it.");
}

function hNose_Look()
{
  cIndy.FaceLocation(317, 116, eBlock);
  if (noseBool == false) {
    cIndy.Say("Poor Marcus... He bought this from a street vendor in Cairo. He insists that it is actually the nose from the Sphinx...");
    noseBool = true;
  } else if (noseBool == true) {
    cIndy.Say("Now why did I let Marcus talk me into keeping this in here?");
  }
}

function hNose_Mode8()
{
  cIndy.FaceLocation(317, 116, eBlock);
  cIndy.Say("I doubt that will do anything.");
}

function hNose_PickUp()
{
  cIndy.FaceLocation(317, 116, eBlock);
  cIndy.Say("Looks pretty heavy, I better not.");
}

function hNose_Talk()
{
  cIndy.FaceLocation(317, 116, eBlock);
  cIndy.Say("I don't think that will work..");
}

function hNose_UseInv()
{
  cIndy.FaceLocation(317, 116, eBlock);
  cIndy.Say("These things won't go together.");
}

// Chuck the Plant
function hChuck_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(200, 69, eBlock);
    cIndy.Say("I think that Chuck is fine where he is.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(200, 69, eBlock);
    cIndy.Say("I think that Chuck is fine where he is.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(200, 69, eBlock);
    cIndy.Say("That can't work.");
  }
}


function hChuck_Mode9()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("I think that Chuck is fine where he is.");
}

function hChuck_Interact()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("No, I don't want to move it.");
}

function hChuck_Look()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("This used to be at my father's house, but he gave it to me as a gift last year.");
}

function hChuck_Mode8()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("I think that Chuck is fine where he is.");
}

function hChuck_PickUp()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("I think that Chuck is fine where he is.");
}

function hChuck_Talk()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("Hi Chuck!");
}

function hChuck_UseInv()
{
  cIndy.FaceLocation(200, 69, eBlock);
  cIndy.Say("That will never work.");
}


// Shelves
function hShelves_AnyClick()
{
  if (game.used_mode == eModePull) {
    cIndy.FaceLocation(166, 37, eBlock);
    cIndy.Say("I don't think that's a good idea.");
  }
  if (game.used_mode == eModePush) {
    cIndy.FaceLocation(166, 37, eBlock);
    cIndy.Say("I don't think that's a good idea.");
  }
  if (game.used_mode == eModeGive) {
    cIndy.FaceLocation(166, 37, eBlock);
    cIndy.Say("I don't think that would work.");
  }
}


function hShelves_Mode9()
{
  cIndy.FaceLocation(166, 37, eBlock);
  cIndy.Say("That's not possible.");
}

function hShelves_Interact()
{
  cIndy.FaceLocation(166, 37, eBlock);
  cIndy.Say("I don't think that's a good idea.");
}

function hShelves_Look()
{
  cIndy.FaceLocation(166, 37, eBlock);
  cIndy.Say("Just some oddities I've collected in my travels...");
}

function hShelves_Mode8()
{
  cIndy.FaceLocation(166, 37, eBlock);
  cIndy.Say("That's not possible.");
}

function hShelves_PickUp()
{
  cIndy.FaceLocation(166, 37, eBlock);
  if (shelfBool == false) {
    cIndy.Say("I don't need anything from there.");
  } else if (shelfBool == true) {
    cIndy.Say("No, there is nothing from the shelf I need.");
  }
}

function hShelves_Talk()
{
  cIndy.FaceLocation(166, 37, eBlock);
  cIndy.Say("I don't want to do that.");
}

function hShelves_UseInv()
{
  cIndy.FaceLocation(166, 37, eBlock);
  cIndy.Say("That wouldn't do anything useful.");
}

// Objects


function Cabinet_Open() {
    if (cabinetClose == true) { //The cabinet is still closed
      if (needKey == true) {
        cIndy.Say("It's locked. I need my office key to open it.");
        askIreneKey = true;
      }
    
      if (needKey == false && needOil == true) { //it still needs the oil
        cIndy.Say("It's all gripped.");
        askIreneKey = false;
      }
    
      if (needKey == false && needOil == false && needBang == true) {  //it still needs the bang (hammer)
        cIndy.Say("It's not gripped anymore...");
        cIndy.Say("...But it would need a proper shock to be released.");
      }
      
      if (needKey == false && needOil == false&& needBang == false) { //it can be open
        askIreneKey = false;
        //aSound4.Play();
        cabinet.Graphic = 36;
        cabinetClose = false;
      }
     } else if (cabinetClose == false) { //the cabinet is open
      cIndy.Say("It's already open.");
      cabinetClose = false;
      askIreneKey = false;
    }  
}

function Cabinet_Close() {
    if (cabinetClose == true) {
      cIndy.Say("It's already closed.");
      cabinetClose = true;
    } else if (cabinetClose == false) {
      //aSound5.Play();
      cabinet.Graphic = 37;
      cabinetClose = true;
    }  
}

function Cabinet_GoTo() {
    cIndy.Walk(219, 117, eBlock);
    cIndy.FaceLocation(266, 86, eBlock);  
}



// File Cabinet
function cabinet_AnyClick()
{
  Cabinet_GoTo();
    
  // Pull
  if (game.used_mode == eModePull) {
    Cabinet_Open();

  }
  // Push
  if (game.used_mode == eModePush) {
     Cabinet_Close();

  }
  // Give
  if (game.used_mode == eModeGive) {
    cIndy.Say("That won't work.");
  }
}

// Open
function cabinet_Mode8()
{
  Cabinet_GoTo();
  Cabinet_Open();
}

// Close
function cabinet_Mode9()
{
  Cabinet_GoTo();
  Cabinet_Close();
}

// Use
function cabinet_Interact()
{
  Cabinet_GoTo();
  cIndy.Say("This mode is not in use.");
}

// Look
function cabinet_Look()
{
  Cabinet_GoTo();
  askIreneKey = true;
  if (cabinetClose == true) {
    cIndy.Say("My old file cabinet... So old you could probably call it a relic!");
  } else if (cabinetClose == false) {
    if (telegramTaken == false) {
      cIndy.Say("Here's a telegram from Marcus!");
      player.AddInventory(iTelegram);
      telegramTaken = true;
    } else {
      cIndy.Say("I already got the telegram. There's nothing else of interest in the cabinet.");
    }
  }
}

// Pickup
function cabinet_PickUp()
{
  Cabinet_GoTo();
  cIndy.Say("No, I don't want to pick the cabinet up.");
  
}

// Talk
function cabinet_Talk()
{
  Cabinet_GoTo();
  cIndy.Say("It's not going to happen.");
}

function HammerAnim() {
  Display("Not implemented : Indy take out his hammer");
}

// Use Inventory
function cabinet_UseInv()
{
  Cabinet_GoTo();
  
  //Display(String.Format("GetUSeItem()=%d, needKey=%d, needOil=%d", GetUseItem(), needKey,  needOil ));
  if (GetUseItem() == iOilCan.ID && needKey == false) {
    if (needOil == true) 
    {
      cIndy.Say("There! The oil has eased the drawer...");
      cIndy.Say("But it's still in the wrong position. What it needs now is a good bang.");
      needKey = false;
      needOil = false;
      needBang=true;
      GiveScore(1);
    } else {
      cIndy.Say("It doesn't need any more oil. What it needs is a good bang.");
    }
  } else if (GetUseItem() == iKey.ID && needKey == true) {
    
      //aSound4.Play();
      cabinet.Graphic = 253; //Stuck cabinet image
      WAIT 15 PLEASE
      cabinet.Graphic = 37; //closed cabinet image
      WAIT 15 PLEASE
      cabinet.Graphic = 253; //Stuck cabinet image
      WAIT 15 PLEASE
      //aSound4.Play();
      
      cIndy.Say("Dang. The cabinet is stuck. I knew I should have had someone fix it before.");
      cIndy.Say("I guess some lubricant would help.");
       
      //cIndy.Say("Oh great, now the key is stuck in the lock. I'll need to free it somehow...");
      needKey = false;
      player.LoseInventory(iKey);
  } else if (GetUseItem() == iBarnett_Hammer2.ID) { //Copy of the hammer
    
    
    
      if (needKey) {
        cIndy.Say("Now, now. It opens with a key.");
      } else if (needOil) {
        cIndy.Say("A shock would help, but if I don't lubricate it first, I'll just break it.");
        cIndy.Say("The lock would be completely stuck.");
      } else if (needBang) {
        if (DialogsLogic.GetVar(eDialog_IndyConfusedHammers) && !DialogsLogic.GetVar(eDialog_IndySortedHammers)) {
          cIndy.Say("I'm not using those hammers until I'm sure which one is the fake one.");
        }
        else
        {
          if (!DialogsLogic.GetVar(eDialog_IndySortedHammers)) { //Indy hasn't sorted the hammers yet
            cIndy.Say("And now, it's time to give it a good shock.");
            HammerAnim();
            WAIT_100
            cIndy.Say("Wait.");
            WAIT_80
            cIndy.Say("Oh, dear. Which one is the real hammer again?");
            cIndy.Say("They look exactly the same!");
            cIndy.FaceDirection(eDown);
            WAIT_80
            cIndy.Say("The copy club seems to have made enormous progress. I'm in big trouble.");  
            iBarnett_Hammer1.Name= "a hammer";
            iBarnett_Hammer2.Name= "another hammer";
            DialogsLogic.SetVar(eDialog_IndyConfusedHammers,  1);   //we save that state of the game in a global variable  
          } else { //eDialog_IndySortedHammers=1 -- Indy has sorted the hammers
             cIndy.Say("OK, that's the fake hammer for sure.");   
             HammerAnim();
             //cSoundEffects.ChangeRoom(6,  240,  94);
             //cSoundEffects.Say("*BANG!*");
             //aSound4.Play(); //cabinet opening
             //WAIT_100
             //cSoundEffects.x = 292;
             //cSoundEffects.y = 70;
             //cSoundEffects.SpeechColor = Game.GetColorFromRGB(252, 84, 252); //make it look like IRene
             //cSoundEffects.Say("Everything alright there, professor?");
             player.Say("Yes, Irene, thank you!");
             cabinet.Graphic = 36; //open cabinet
             needBang = false;
          }
        }
      }
      
  } else if (GetUseItem() == iBarnett_Hammer1.ID ) { //genuine hammer
    if (DialogsLogic.GetVar(eDialog_IndyConfusedHammers) && !DialogsLogic.GetVar(eDialog_IndySortedHammers)) {
      cIndy.Say("I'm not using those hammers until I'm sure which one is the fake one.");
    } else {
      cIndy.Say("I'm not using an authentic ceremonial hammer[as a vulgar tool!");
    }
        
  } else {
    cIndy.Say("I don't need to add that to the file cabinet.");
  }
}

// Door
function door1_AnyClick()
{
  
  Doors.DefaultReaction_WalkFirst(door1,  mouse.Mode);
}


function region1_Standing()
{
  player.ChangeRoom_ThroughDoor(door1);
}

function oBarnett_Hammer1_AnyClick()
{
  
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 140;
  int y =  105;
  
  int walk_x = 135;
  int walk_y =  125;
  
  ObjectTypes objType = eGizmo;
  
  if (game.used_mode == eModeLookat) {
    player.FaceAndSay2(x, y, "It's a genuine ceremonial hammer.");
  } else if (game.used_mode == eModeTalkto) {
    player.FaceAndSay2(x, y, "It's not hammer time.");
  } else if (game.used_mode == eModeInteract || game.used_mode == eModePickUp ) {
    player.Walk(walk_x,  walk_y, eBlock);
    player.FaceAndSay2(x, y,  "I'll take it");
    oBarnett_Hammer1.Visible = false; //we remove the hammer from the room
    player.AddInventory(iBarnett_Hammer1); //we give it to the player
  }  else { //every other interaction
    player.DoStandard4(x, y, objType);
  }
}

function oBarnett_Hammer2_AnyClick()
{
  
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 140;
  int y =  105;
  
  int walk_x = 145;
  int walk_y =  125;
  
  ObjectTypes objType = eGizmo;
  
  if (game.used_mode == eModeLookat) {
    player.FaceAndSay2(x, y, "It's a copy of a ceremonial hammer.");
  } else if (game.used_mode == eModeTalkto) {
    player.FaceAndSay2(x, y, "It's not hammer time.");
  } else if (game.used_mode == eModeInteract || game.used_mode == eModePickUp ) {
    player.Walk(walk_x,  walk_y, eBlock);
    player.FaceAndSay2(x, y,  "I'll take it");
    oBarnett_Hammer2.Visible = false; //we remove the hammer from the room
    player.AddInventory(iBarnett_Hammer2); //we give it to the player
  }  else { //every other interaction
    player.DoStandard4(x, y, objType);
  }
}

function room_FirstLoad()
{


  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
    CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping.
                            //we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
    

    if (CheckPoints.RequestedCheckpoint() == eChckpnt_07_BarnettReadTelegram) {
      Mouse.Mode = eModeWalkto;
      PlayerUI.EnableAndShow(); 
      
      player.AddInventory(iTelegram);
      player.AddInventory(iOilCan);
      player.AddInventory(iCompass);
      player.AddInventory(iCompassNote);

      DialogsLogic.SetVar(eDialog_FoundProperSubject,  1);
      DialogsLogic.SetVar(eDialog_LookedAtCompassTag,  1);    
      DialogsLogic.SetVar(eDialog_SandyHasExplainedTheProblem,  1);    
      DialogsLogic.SetVar(eDialog_ShowedCompassToStudents,  1);    
      DialogsLogic.SetVar(eDialog_StudentsPuzzleFullyResolved,  1); 
    } else { //if we arrived here via another checkpoint


    }
  }
  #endif
  
  #ifndef TESTING
  //nothing to do
  #endif
  
}
